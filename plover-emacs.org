#+TITLE: Plover with Emacs
#+EXPORT_FILE_NAME: ./docs/index.html
#+STARTUP: showall
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />

----------------

#+begin_quote
ATTENTION: This document and the corresponding dictionary are under
active development!  How active?  Check the [[https://github.com/excalamus/plover-emacs][repo]].  To be notified of
changes, [[https://webapps.stackexchange.com/questions/29756/what-does-starring-a-repository-on-github-do][star or watch]] the repository.

In the meantime, I hope you find something useful!
#+end_quote

Get the Plover Emacs dictionary [[https://github.com/excalamus/plover-emacs][here]].

* Opening bracket
[[http://www.openstenoproject.org/plover/][Plover]] is a libre software engine for stenography.  It provides a
computer input method which is fast (over 240 wpm), ergonomic, and
flexible.  Plover converts a stroke of keys to a character, word,
phrase, or command.  Strokes are defined within a dictionary file,
typically JSON.  See the Plover GitHub wiki entry "[[https://github.com/openstenoproject/plover/wiki/Dictionary-Format][Dictionary Format]]"
for details.

[[https://www.gnu.org/software/emacs/][Emacs]] is a text editor/word processor used by programmers and authors,
as well as researchers and hobbyists worldwide.  Originally released
in 1976, it is the flagship software of the [[https://www.gnu.org/philosophy/free-sw.html][GNU project]].  Like Plover,
Emacs is community developed and allows you to run, change, and
distribute it, more or less, however you want.  It has been developed
for more than 40 years and, although modest in appearance, boasts
countless features and add-ons[fn:3].

#+CAPTION: Screen shot of the Emacs text editor.
[[file:./emacs.png]]

Emacs works by binding every key to a programming command[fn:1].  For
example, pressing 'a' calls the =self-insert-command= which inserts
the character typed, 'a'.  Commands can also be bound to key
combinations.  To change windows, press 'Control + x + o' (notated
=C-x o=) to call =other-window=.  Commands not bound to a key or key
combination are accessed through an interactive process initiated with
'Alt+x' (notated =M-x=)[fn:2].  To change windows using the
interactive process, type =M-x other-window=.

This document defines, literally, a dictionary for using Plover with
Emacs.  Explanations of concepts and rationale are provided for each
set of entries.  The intent is to make using Plover with Emacs as
simple as possible, while teaching users how to modify the system.
Basic familiarity with Plover and Emacs is assumed.  If you're not
familiar with Plover and want to learn it, visit the [[https://github.com/openstenoproject/plover/wiki/Learning-Stenography][Plover wiki]].  To
get started with Emacs, check out the [[https://www.gnu.org/software/emacs/tour/][guided tour]].

#+begin_src js :tangle plover-emacs.json :exports none
{
#+end_src

* Dictionary design principles
** Sequence chains
Many Emacs commands are called through sequences.  Typically, a Plover
dictionary maps a stroke to a single output element (e.g. character,
word, or phrase).  However, it's possible, to send a sequence in
Plover by separating elements with a space.

For example, in Emacs =C-x 8 m= writes =µ=.  Send the sequence =C-x 8
m= using Plover with:
#+begin_example
{#Control_L(x) 8 m}
#+end_example

Some Emacs sequences require capital letters.  Use =Shift()= to do
this.  For example, =C-x 8 R= writes =®= in Emacs.  To have Plover
send this, use:
#+begin_example
{#Control_L(x) 8 Shift(r)}
#+end_example

Sequence chains can also happen within a modifier definition.  To
export an Org document to HTML, the command =C-c C-e h h= is used.
This would be handled in Plover with:
#+begin_example
{#Control_L(c e) h h}
#+end_example

** Patterns
Mirabai Knight, founder of the Open Steno Project, points out in her
[[http://plover.stenoknight.com/2010/06/steno-101-lesson-zero.html][Steno 101]] series that stenography can be thought of as a
phonetic-mnemonic system.  We associate a phonetic sound to a set of
keyboard keys to help us remember what they correspond to.  This
phonetic pattern helps define a system for human languages.

Another pattern is to define a stroke by the shape it makes on the
keyboard.  This is useful when phonetic patterns don't make sense or
aren't practical.  Because shape patterns are spatially oriented,
associations can be made through transformations (e.g. rotation,
translation) of the shape. For example, the [[http://www.openstenoproject.org/stenodict/dictionaries/cross_platform_movement.html][Cross Platform Movement]]
dictionary uses the pattern technique.  Page Up and Page Down are
mapped to =-RPG= and =-FBL= because the pattern they make looks like
up and down arrows.

** Mode prefix
A pseudo "mode" can be defined by prefixing all related commands with
the same pattern.  Select a key cluster and either append keys to that
shape pattern or begin a multi-stroke command with it.

Mark Kislingbury, record holder for fastest writer in the world, uses
this approach when he [[http://acraconference2015.weebly.com/uploads/2/1/4/4/21444166/mark_kislingbury_presentation_acra_01-23-2015.pdf][advises]] to put small words on the left.  For
example, =THA= ("that") leaves the board open for phrases like "that
was", "that will", "that had", etc. by adding a single key.  =THA=
acts as a "mode" for all phrases beginning with "that".

The [[http://www.openstenoproject.org/stenodict/dictionaries/cross_platform_movement.html][Cross Platform Movement]] dictionary also uses the prefix technique.
=STPH-= is used as a prefix for all subsequent movement related
commands.  Since =-R= corresponds to "a" (the left arrow key in [[https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys][WASD)]],
the command =STPH-R= means "move left".

** Right hand rule
It's nearly possible to write the entire alphabet left handed.  All
letters but "e" (=E=), "i" (=EU=), and "u" (=U=) can be written with a
left hand key.  By defining a right hand stroke that excludes the =E=
and =U= keys, we can create single strokes for every letter in the
alphabet.

|-----------+------------+--------|
| Left Hand | Right Hand | Letter |
|-----------+------------+--------|
| A         |            | "a"    |
|-----------+------------+--------|
| PW        |            | "b"    |
|-----------+------------+--------|
| KR        |            | "c"    |
|-----------+------------+--------|
| TK        |            | "d"    |
|-----------+------------+--------|
|           | E          | "e"    |
|-----------+------------+--------|
| TP        |            | "f"    |
|-----------+------------+--------|
| TKPW      |            | "g"    |
|-----------+------------+--------|
| H         |            | "h"    |
|-----------+------------+--------|
|           | EU         | "i"    |
|-----------+------------+--------|
| SKWR      |            | "j"    |
|-----------+------------+--------|
| K         |            | "k"    |
|-----------+------------+--------|
| HR        |            | "l"    |
|-----------+------------+--------|
| PH        |            | "m"    |
|-----------+------------+--------|
| TPH       |            | "n"    |
|-----------+------------+--------|
| O         |            | "o"    |
|-----------+------------+--------|
| P         |            | "p"    |
|-----------+------------+--------|
| KW        |            | "q"    |
|-----------+------------+--------|
| R         |            | "r"    |
|-----------+------------+--------|
| S         |            | "s"    |
|-----------+------------+--------|
| T         |            | "t"    |
|-----------+------------+--------|
|           | U          | "u"    |
|-----------+------------+--------|
| SR        |            | "v"    |
|-----------+------------+--------|
| W         |            | "w"    |
|-----------+------------+--------|
| KP        |            | "x"    |
|-----------+------------+--------|
| KWR       |            | "y"    |
|-----------+------------+--------|
| STKPW     |            | "z"    |
|-----------+------------+--------|

* Emacs: Escape, Meta, Alt, Control, Shift
Can take advantage of the right hand rule to define modifiers for each
letter of the alphabet.  If the shape is mirrored on the left hand
side, this gives a prefix that allows us to leverage the WASD, Page
Up/Page Down, and Home/End right hand concepts from [[http://www.openstenoproject.org/stenodict/dictionaries/cross_platform_movement.html][Cross Platform
Movement]] dictionary.

"Super bit" is the top left.

"Shift bit" is the bottom left.

Notice how the shapes combine:

| L Pattern | Left hand | Modifier              | Right Hand | R Pattern |
|-----------+-----------+-----------------------+------------+-----------|
| ⠴         | =KPW=     | Control               | =-PBG=     | ⠦         |
| ⠲         | =TPW=     | Alt                   | =-PBL=     | ⠖         |
| ⠶_        | =TKPW=    | Control + Alt         | =-PBLG=    | _⠶       |
| ∴         | =KPR=     | Shift                 | =-RPG=     | ∴         |
| .:.       | =KPWR=    | Control + Shift       | =-RPBG=    | .:.       |
| ⠈⠅.       | =TPWR=    | Alt + Shift           | =-RPBL=    | .⠅⠁       |
| ::.       | =TKPWR=   | Control + Alt + Shift | =-RPBLG=   | .::       |


Super isn't used often with Emacs.  However, it is possible (and
others may find the pattern useful).

| L Pattern | Left hand | Modifier                      | Right Hand | R Pattern |
|-----------+-----------+-------------------------------+------------+-----------|
| ∵         | =TWH=     | Super                         | =-FBL=     | ∵         |
| .⠅⠁       | =KPWH=    | Control + Super               | =-FPBG=    | ⠈⠅.       |
| ⠈⠅⠁       | =TPWH=    | Alt + Super                   | =-FPBL=    | ⠈⠅⠁       |
| _⠶        | =PWHR=    | Shift + Super                 | =-FRPB=    | ⠶_        |
| ⠅⠅⠈       | =TKPWH=   | Control + Alt + Super         | =-FPBLG=   | ⠈⠅⠅       |
| .::       | =KPWHR=   | Control + Shift + Super       | =-FRPBG=   | ::.       |
| ⠈⠅⠅       | =TPWHR=   | Alt + Shift + Super           | =-FRPBL=   | ⠅⠅⠈       |
| :::       | =TKPWHR=  | Control + Alt + Shift + Super | =-FRPBLG=  | :::       |

We can auto generate all these combinations using Emacs Lisp.

#+name: generated
#+begin_src emacs-lisp :lexical t :tangle plover-emacs.json :results value verbatim :exports both
;; still under development
;; scratch/lisp.el

(defun ctl (x)
  (format "Control(%s)" x))

(defun alt (x)
  (format "Alt(%s)" x))

(defun shf (x)
  (format "Shift(%s)" x))

(defun sup (x)
  (format "Super(%s)" x))

(defun cmd (x)
  (format "{#%s}" x))

(defvar steno-order "STKPWHRAO*EUFRPBLGTSDZ")

(defun steno< (a b)
  (< (search a steno-order) (search b steno-order)))

(defun steno-sort (x)
  (apply #'concat
         (sort (split-string x "" t) 'steno<)))

(defun right-hand-p (x)
  (let* ((right-keys '("E" "U" "F" "R" "P" "B" "L" "G" "T" "S" "D" "Z"))
        (x (if (string-equal (substring x 0 1) "-")
               (substring x 1)
             x))
        (split (split-string x "" t)))
    (subsetp split right-keys :test #'string-equal)))

(defun left-hand-p (x)
  (let* ((left-keys '("S" "T" "K" "P" "W" "H" "R" "A" "O" ))
        (x (if (string-equal (substring x 0 1) "-")
               (substring x 1)
             x))
        (split (split-string x "" t)))
    (subsetp split left-keys :test #'string-equal)))

;; ;; todo
;; ;; generalize this for RHS/LHS "pseudo modes"; will need modifer alist?
;; (defun json (s c)
;;   (let (
;;         (stroke (if (left-hand-p s)
;;                     (concat "" s)
;;                     )
;;   (format "\"%s\": \"%s\"," s c))

(defun json (s c)
  (format "\"%s\": \"%s\"," s c))

;; https://www.public.asu.edu/~huanliu/AI04S/Lisp_Assignment_Solutions.html
(defun powerset(lst)
  (if (null lst)
    '(nil)
    (let ((ps (powerset (cdr lst))))
      (append ps (mapcar #'(lambda (x) (cons (car lst) x)) ps)))))

;; (cdr (powerset '(1 2 3 4)))
;; (nil (4) (3) (3 4) (2) (2 4) (2 3) (2 3 4) (1) (1 4) (1 3) (1 3 4) ...)

;; ANSI Common Lisp p.110
(defun compose (fns)
  (destructuring-bind (fn1 . cdr) (reverse fns)
    #'(lambda (&rest args)
        (reduce #'(lambda (v f) (funcall f v))
                cdr
                :initial-value (apply fn1 args)))))

;; (mapcar (compose '(list round sqrt))
;;         '(4 9 16 25))

;; (mapcar (compose '(sqrt))
;;         '(4 9 16 25))

(defun apply-functions (fns lst)
  (mapcan #'(lambda (x) (mapcar x lst)) fns))

;; (defun apply-functions (fns lst)
;;   (mapcan
;;    #'(lambda (x)
;;        (mapcar (compose (list #'cmd x)) lst))
;;           fns))

(let* ((alphabet-alist
       '(("a" . "A") ("b" . "PW") ("c" . "KR") ("d" . "TK") ("e" . "-E")
         ("f" . "TP") ("g" . "TKPW") ("h" . "H") ("i" . "-EU") ("j" . "SKWR")
         ("k" . "K") ("l" . "HR") ("m" . "PH") ("n" . "TPH") ("o" . "O")
         ("p" . "P") ("q" . "KW") ("r" . "R") ("s" . "S") ("t" . "T")
         ("u" . "-U") ("v" . "SR") ("w" . "W") ("x" . "KP") ("y" . "KWR")
         ("z" . "STKPW")))
       (alphabet (mapcar 'car alphabet-alist))
       (strokes (mapcar 'cdr alphabet-alist))
       (modifiers '(ctl alt shf sup))
       (powerset-fns (mapcar 'compose (cdr (powerset modifiers))))
       (cmded-fns (mapcar
               #'(lambda (x) (compose (list #'cmd x)))
               powerset-fns))
       (commands (apply-functions cmded-fns alphabet))
       (repeats (/ (length commands) (length strokes)))  ;
       (repeated (apply 'append (make-list repeats strokes)))
       (dictionary (seq-mapn #'json repeated commands)))
  (setq result "")
  (cl-loop for entry in dictionary do
           (setq result (concat result entry "\n")))
  result)

;; There are 2^n elements in a powerset.  Since we drop the empty set,
;; there are 2^4-1=15 powerset functions.  This means for the two
;; lists to be of equal length, we need 15 copies of the alphabet.
;; Since each of powerset function is applied to the whole alphabet,
;; there are 15 * 26 = 390 total commands.
#+end_src

#+RESULTS: generated
#+begin_example
"\"A\": \"{#Super(a)}\",
\"PW\": \"{#Super(b)}\",
\"KR\": \"{#Super(c)}\",
\"TK\": \"{#Super(d)}\",
\"-E\": \"{#Super(e)}\",
\"TP\": \"{#Super(f)}\",
\"TKPW\": \"{#Super(g)}\",
\"H\": \"{#Super(h)}\",
\"-EU\": \"{#Super(i)}\",
\"SKWR\": \"{#Super(j)}\",
\"K\": \"{#Super(k)}\",
\"HR\": \"{#Super(l)}\",
\"PH\": \"{#Super(m)}\",
\"TPH\": \"{#Super(n)}\",
\"O\": \"{#Super(o)}\",
\"P\": \"{#Super(p)}\",
\"KW\": \"{#Super(q)}\",
\"R\": \"{#Super(r)}\",
\"S\": \"{#Super(s)}\",
\"T\": \"{#Super(t)}\",
\"-U\": \"{#Super(u)}\",
\"SR\": \"{#Super(v)}\",
\"W\": \"{#Super(w)}\",
\"KP\": \"{#Super(x)}\",
\"KWR\": \"{#Super(y)}\",
\"STKPW\": \"{#Super(z)}\",
\"A\": \"{#Shift(a)}\",
\"PW\": \"{#Shift(b)}\",
\"KR\": \"{#Shift(c)}\",
\"TK\": \"{#Shift(d)}\",
\"-E\": \"{#Shift(e)}\",
\"TP\": \"{#Shift(f)}\",
\"TKPW\": \"{#Shift(g)}\",
\"H\": \"{#Shift(h)}\",
\"-EU\": \"{#Shift(i)}\",
\"SKWR\": \"{#Shift(j)}\",
\"K\": \"{#Shift(k)}\",
\"HR\": \"{#Shift(l)}\",
\"PH\": \"{#Shift(m)}\",
\"TPH\": \"{#Shift(n)}\",
\"O\": \"{#Shift(o)}\",
\"P\": \"{#Shift(p)}\",
\"KW\": \"{#Shift(q)}\",
\"R\": \"{#Shift(r)}\",
\"S\": \"{#Shift(s)}\",
\"T\": \"{#Shift(t)}\",
\"-U\": \"{#Shift(u)}\",
\"SR\": \"{#Shift(v)}\",
\"W\": \"{#Shift(w)}\",
\"KP\": \"{#Shift(x)}\",
\"KWR\": \"{#Shift(y)}\",
\"STKPW\": \"{#Shift(z)}\",
\"A\": \"{#Shift(Super(a))}\",
\"PW\": \"{#Shift(Super(b))}\",
\"KR\": \"{#Shift(Super(c))}\",
\"TK\": \"{#Shift(Super(d))}\",
\"-E\": \"{#Shift(Super(e))}\",
\"TP\": \"{#Shift(Super(f))}\",
\"TKPW\": \"{#Shift(Super(g))}\",
\"H\": \"{#Shift(Super(h))}\",
\"-EU\": \"{#Shift(Super(i))}\",
\"SKWR\": \"{#Shift(Super(j))}\",
\"K\": \"{#Shift(Super(k))}\",
\"HR\": \"{#Shift(Super(l))}\",
\"PH\": \"{#Shift(Super(m))}\",
\"TPH\": \"{#Shift(Super(n))}\",
\"O\": \"{#Shift(Super(o))}\",
\"P\": \"{#Shift(Super(p))}\",
\"KW\": \"{#Shift(Super(q))}\",
\"R\": \"{#Shift(Super(r))}\",
\"S\": \"{#Shift(Super(s))}\",
\"T\": \"{#Shift(Super(t))}\",
\"-U\": \"{#Shift(Super(u))}\",
\"SR\": \"{#Shift(Super(v))}\",
\"W\": \"{#Shift(Super(w))}\",
\"KP\": \"{#Shift(Super(x))}\",
\"KWR\": \"{#Shift(Super(y))}\",
\"STKPW\": \"{#Shift(Super(z))}\",
\"A\": \"{#Alt(a)}\",
\"PW\": \"{#Alt(b)}\",
\"KR\": \"{#Alt(c)}\",
\"TK\": \"{#Alt(d)}\",
\"-E\": \"{#Alt(e)}\",
\"TP\": \"{#Alt(f)}\",
\"TKPW\": \"{#Alt(g)}\",
\"H\": \"{#Alt(h)}\",
\"-EU\": \"{#Alt(i)}\",
\"SKWR\": \"{#Alt(j)}\",
\"K\": \"{#Alt(k)}\",
\"HR\": \"{#Alt(l)}\",
\"PH\": \"{#Alt(m)}\",
\"TPH\": \"{#Alt(n)}\",
\"O\": \"{#Alt(o)}\",
\"P\": \"{#Alt(p)}\",
\"KW\": \"{#Alt(q)}\",
\"R\": \"{#Alt(r)}\",
\"S\": \"{#Alt(s)}\",
\"T\": \"{#Alt(t)}\",
\"-U\": \"{#Alt(u)}\",
\"SR\": \"{#Alt(v)}\",
\"W\": \"{#Alt(w)}\",
\"KP\": \"{#Alt(x)}\",
\"KWR\": \"{#Alt(y)}\",
\"STKPW\": \"{#Alt(z)}\",
\"A\": \"{#Alt(Super(a))}\",
\"PW\": \"{#Alt(Super(b))}\",
\"KR\": \"{#Alt(Super(c))}\",
\"TK\": \"{#Alt(Super(d))}\",
\"-E\": \"{#Alt(Super(e))}\",
\"TP\": \"{#Alt(Super(f))}\",
\"TKPW\": \"{#Alt(Super(g))}\",
\"H\": \"{#Alt(Super(h))}\",
\"-EU\": \"{#Alt(Super(i))}\",
\"SKWR\": \"{#Alt(Super(j))}\",
\"K\": \"{#Alt(Super(k))}\",
\"HR\": \"{#Alt(Super(l))}\",
\"PH\": \"{#Alt(Super(m))}\",
\"TPH\": \"{#Alt(Super(n))}\",
\"O\": \"{#Alt(Super(o))}\",
\"P\": \"{#Alt(Super(p))}\",
\"KW\": \"{#Alt(Super(q))}\",
\"R\": \"{#Alt(Super(r))}\",
\"S\": \"{#Alt(Super(s))}\",
\"T\": \"{#Alt(Super(t))}\",
\"-U\": \"{#Alt(Super(u))}\",
\"SR\": \"{#Alt(Super(v))}\",
\"W\": \"{#Alt(Super(w))}\",
\"KP\": \"{#Alt(Super(x))}\",
\"KWR\": \"{#Alt(Super(y))}\",
\"STKPW\": \"{#Alt(Super(z))}\",
\"A\": \"{#Alt(Shift(a))}\",
\"PW\": \"{#Alt(Shift(b))}\",
\"KR\": \"{#Alt(Shift(c))}\",
\"TK\": \"{#Alt(Shift(d))}\",
\"-E\": \"{#Alt(Shift(e))}\",
\"TP\": \"{#Alt(Shift(f))}\",
\"TKPW\": \"{#Alt(Shift(g))}\",
\"H\": \"{#Alt(Shift(h))}\",
\"-EU\": \"{#Alt(Shift(i))}\",
\"SKWR\": \"{#Alt(Shift(j))}\",
\"K\": \"{#Alt(Shift(k))}\",
\"HR\": \"{#Alt(Shift(l))}\",
\"PH\": \"{#Alt(Shift(m))}\",
\"TPH\": \"{#Alt(Shift(n))}\",
\"O\": \"{#Alt(Shift(o))}\",
\"P\": \"{#Alt(Shift(p))}\",
\"KW\": \"{#Alt(Shift(q))}\",
\"R\": \"{#Alt(Shift(r))}\",
\"S\": \"{#Alt(Shift(s))}\",
\"T\": \"{#Alt(Shift(t))}\",
\"-U\": \"{#Alt(Shift(u))}\",
\"SR\": \"{#Alt(Shift(v))}\",
\"W\": \"{#Alt(Shift(w))}\",
\"KP\": \"{#Alt(Shift(x))}\",
\"KWR\": \"{#Alt(Shift(y))}\",
\"STKPW\": \"{#Alt(Shift(z))}\",
\"A\": \"{#Alt(Shift(Super(a)))}\",
\"PW\": \"{#Alt(Shift(Super(b)))}\",
\"KR\": \"{#Alt(Shift(Super(c)))}\",
\"TK\": \"{#Alt(Shift(Super(d)))}\",
\"-E\": \"{#Alt(Shift(Super(e)))}\",
\"TP\": \"{#Alt(Shift(Super(f)))}\",
\"TKPW\": \"{#Alt(Shift(Super(g)))}\",
\"H\": \"{#Alt(Shift(Super(h)))}\",
\"-EU\": \"{#Alt(Shift(Super(i)))}\",
\"SKWR\": \"{#Alt(Shift(Super(j)))}\",
\"K\": \"{#Alt(Shift(Super(k)))}\",
\"HR\": \"{#Alt(Shift(Super(l)))}\",
\"PH\": \"{#Alt(Shift(Super(m)))}\",
\"TPH\": \"{#Alt(Shift(Super(n)))}\",
\"O\": \"{#Alt(Shift(Super(o)))}\",
\"P\": \"{#Alt(Shift(Super(p)))}\",
\"KW\": \"{#Alt(Shift(Super(q)))}\",
\"R\": \"{#Alt(Shift(Super(r)))}\",
\"S\": \"{#Alt(Shift(Super(s)))}\",
\"T\": \"{#Alt(Shift(Super(t)))}\",
\"-U\": \"{#Alt(Shift(Super(u)))}\",
\"SR\": \"{#Alt(Shift(Super(v)))}\",
\"W\": \"{#Alt(Shift(Super(w)))}\",
\"KP\": \"{#Alt(Shift(Super(x)))}\",
\"KWR\": \"{#Alt(Shift(Super(y)))}\",
\"STKPW\": \"{#Alt(Shift(Super(z)))}\",
\"A\": \"{#Control(a)}\",
\"PW\": \"{#Control(b)}\",
\"KR\": \"{#Control(c)}\",
\"TK\": \"{#Control(d)}\",
\"-E\": \"{#Control(e)}\",
\"TP\": \"{#Control(f)}\",
\"TKPW\": \"{#Control(g)}\",
\"H\": \"{#Control(h)}\",
\"-EU\": \"{#Control(i)}\",
\"SKWR\": \"{#Control(j)}\",
\"K\": \"{#Control(k)}\",
\"HR\": \"{#Control(l)}\",
\"PH\": \"{#Control(m)}\",
\"TPH\": \"{#Control(n)}\",
\"O\": \"{#Control(o)}\",
\"P\": \"{#Control(p)}\",
\"KW\": \"{#Control(q)}\",
\"R\": \"{#Control(r)}\",
\"S\": \"{#Control(s)}\",
\"T\": \"{#Control(t)}\",
\"-U\": \"{#Control(u)}\",
\"SR\": \"{#Control(v)}\",
\"W\": \"{#Control(w)}\",
\"KP\": \"{#Control(x)}\",
\"KWR\": \"{#Control(y)}\",
\"STKPW\": \"{#Control(z)}\",
\"A\": \"{#Control(Super(a))}\",
\"PW\": \"{#Control(Super(b))}\",
\"KR\": \"{#Control(Super(c))}\",
\"TK\": \"{#Control(Super(d))}\",
\"-E\": \"{#Control(Super(e))}\",
\"TP\": \"{#Control(Super(f))}\",
\"TKPW\": \"{#Control(Super(g))}\",
\"H\": \"{#Control(Super(h))}\",
\"-EU\": \"{#Control(Super(i))}\",
\"SKWR\": \"{#Control(Super(j))}\",
\"K\": \"{#Control(Super(k))}\",
\"HR\": \"{#Control(Super(l))}\",
\"PH\": \"{#Control(Super(m))}\",
\"TPH\": \"{#Control(Super(n))}\",
\"O\": \"{#Control(Super(o))}\",
\"P\": \"{#Control(Super(p))}\",
\"KW\": \"{#Control(Super(q))}\",
\"R\": \"{#Control(Super(r))}\",
\"S\": \"{#Control(Super(s))}\",
\"T\": \"{#Control(Super(t))}\",
\"-U\": \"{#Control(Super(u))}\",
\"SR\": \"{#Control(Super(v))}\",
\"W\": \"{#Control(Super(w))}\",
\"KP\": \"{#Control(Super(x))}\",
\"KWR\": \"{#Control(Super(y))}\",
\"STKPW\": \"{#Control(Super(z))}\",
\"A\": \"{#Control(Shift(a))}\",
\"PW\": \"{#Control(Shift(b))}\",
\"KR\": \"{#Control(Shift(c))}\",
\"TK\": \"{#Control(Shift(d))}\",
\"-E\": \"{#Control(Shift(e))}\",
\"TP\": \"{#Control(Shift(f))}\",
\"TKPW\": \"{#Control(Shift(g))}\",
\"H\": \"{#Control(Shift(h))}\",
\"-EU\": \"{#Control(Shift(i))}\",
\"SKWR\": \"{#Control(Shift(j))}\",
\"K\": \"{#Control(Shift(k))}\",
\"HR\": \"{#Control(Shift(l))}\",
\"PH\": \"{#Control(Shift(m))}\",
\"TPH\": \"{#Control(Shift(n))}\",
\"O\": \"{#Control(Shift(o))}\",
\"P\": \"{#Control(Shift(p))}\",
\"KW\": \"{#Control(Shift(q))}\",
\"R\": \"{#Control(Shift(r))}\",
\"S\": \"{#Control(Shift(s))}\",
\"T\": \"{#Control(Shift(t))}\",
\"-U\": \"{#Control(Shift(u))}\",
\"SR\": \"{#Control(Shift(v))}\",
\"W\": \"{#Control(Shift(w))}\",
\"KP\": \"{#Control(Shift(x))}\",
\"KWR\": \"{#Control(Shift(y))}\",
\"STKPW\": \"{#Control(Shift(z))}\",
\"A\": \"{#Control(Shift(Super(a)))}\",
\"PW\": \"{#Control(Shift(Super(b)))}\",
\"KR\": \"{#Control(Shift(Super(c)))}\",
\"TK\": \"{#Control(Shift(Super(d)))}\",
\"-E\": \"{#Control(Shift(Super(e)))}\",
\"TP\": \"{#Control(Shift(Super(f)))}\",
\"TKPW\": \"{#Control(Shift(Super(g)))}\",
\"H\": \"{#Control(Shift(Super(h)))}\",
\"-EU\": \"{#Control(Shift(Super(i)))}\",
\"SKWR\": \"{#Control(Shift(Super(j)))}\",
\"K\": \"{#Control(Shift(Super(k)))}\",
\"HR\": \"{#Control(Shift(Super(l)))}\",
\"PH\": \"{#Control(Shift(Super(m)))}\",
\"TPH\": \"{#Control(Shift(Super(n)))}\",
\"O\": \"{#Control(Shift(Super(o)))}\",
\"P\": \"{#Control(Shift(Super(p)))}\",
\"KW\": \"{#Control(Shift(Super(q)))}\",
\"R\": \"{#Control(Shift(Super(r)))}\",
\"S\": \"{#Control(Shift(Super(s)))}\",
\"T\": \"{#Control(Shift(Super(t)))}\",
\"-U\": \"{#Control(Shift(Super(u)))}\",
\"SR\": \"{#Control(Shift(Super(v)))}\",
\"W\": \"{#Control(Shift(Super(w)))}\",
\"KP\": \"{#Control(Shift(Super(x)))}\",
\"KWR\": \"{#Control(Shift(Super(y)))}\",
\"STKPW\": \"{#Control(Shift(Super(z)))}\",
\"A\": \"{#Control(Alt(a))}\",
\"PW\": \"{#Control(Alt(b))}\",
\"KR\": \"{#Control(Alt(c))}\",
\"TK\": \"{#Control(Alt(d))}\",
\"-E\": \"{#Control(Alt(e))}\",
\"TP\": \"{#Control(Alt(f))}\",
\"TKPW\": \"{#Control(Alt(g))}\",
\"H\": \"{#Control(Alt(h))}\",
\"-EU\": \"{#Control(Alt(i))}\",
\"SKWR\": \"{#Control(Alt(j))}\",
\"K\": \"{#Control(Alt(k))}\",
\"HR\": \"{#Control(Alt(l))}\",
\"PH\": \"{#Control(Alt(m))}\",
\"TPH\": \"{#Control(Alt(n))}\",
\"O\": \"{#Control(Alt(o))}\",
\"P\": \"{#Control(Alt(p))}\",
\"KW\": \"{#Control(Alt(q))}\",
\"R\": \"{#Control(Alt(r))}\",
\"S\": \"{#Control(Alt(s))}\",
\"T\": \"{#Control(Alt(t))}\",
\"-U\": \"{#Control(Alt(u))}\",
\"SR\": \"{#Control(Alt(v))}\",
\"W\": \"{#Control(Alt(w))}\",
\"KP\": \"{#Control(Alt(x))}\",
\"KWR\": \"{#Control(Alt(y))}\",
\"STKPW\": \"{#Control(Alt(z))}\",
\"A\": \"{#Control(Alt(Super(a)))}\",
\"PW\": \"{#Control(Alt(Super(b)))}\",
\"KR\": \"{#Control(Alt(Super(c)))}\",
\"TK\": \"{#Control(Alt(Super(d)))}\",
\"-E\": \"{#Control(Alt(Super(e)))}\",
\"TP\": \"{#Control(Alt(Super(f)))}\",
\"TKPW\": \"{#Control(Alt(Super(g)))}\",
\"H\": \"{#Control(Alt(Super(h)))}\",
\"-EU\": \"{#Control(Alt(Super(i)))}\",
\"SKWR\": \"{#Control(Alt(Super(j)))}\",
\"K\": \"{#Control(Alt(Super(k)))}\",
\"HR\": \"{#Control(Alt(Super(l)))}\",
\"PH\": \"{#Control(Alt(Super(m)))}\",
\"TPH\": \"{#Control(Alt(Super(n)))}\",
\"O\": \"{#Control(Alt(Super(o)))}\",
\"P\": \"{#Control(Alt(Super(p)))}\",
\"KW\": \"{#Control(Alt(Super(q)))}\",
\"R\": \"{#Control(Alt(Super(r)))}\",
\"S\": \"{#Control(Alt(Super(s)))}\",
\"T\": \"{#Control(Alt(Super(t)))}\",
\"-U\": \"{#Control(Alt(Super(u)))}\",
\"SR\": \"{#Control(Alt(Super(v)))}\",
\"W\": \"{#Control(Alt(Super(w)))}\",
\"KP\": \"{#Control(Alt(Super(x)))}\",
\"KWR\": \"{#Control(Alt(Super(y)))}\",
\"STKPW\": \"{#Control(Alt(Super(z)))}\",
\"A\": \"{#Control(Alt(Shift(a)))}\",
\"PW\": \"{#Control(Alt(Shift(b)))}\",
\"KR\": \"{#Control(Alt(Shift(c)))}\",
\"TK\": \"{#Control(Alt(Shift(d)))}\",
\"-E\": \"{#Control(Alt(Shift(e)))}\",
\"TP\": \"{#Control(Alt(Shift(f)))}\",
\"TKPW\": \"{#Control(Alt(Shift(g)))}\",
\"H\": \"{#Control(Alt(Shift(h)))}\",
\"-EU\": \"{#Control(Alt(Shift(i)))}\",
\"SKWR\": \"{#Control(Alt(Shift(j)))}\",
\"K\": \"{#Control(Alt(Shift(k)))}\",
\"HR\": \"{#Control(Alt(Shift(l)))}\",
\"PH\": \"{#Control(Alt(Shift(m)))}\",
\"TPH\": \"{#Control(Alt(Shift(n)))}\",
\"O\": \"{#Control(Alt(Shift(o)))}\",
\"P\": \"{#Control(Alt(Shift(p)))}\",
\"KW\": \"{#Control(Alt(Shift(q)))}\",
\"R\": \"{#Control(Alt(Shift(r)))}\",
\"S\": \"{#Control(Alt(Shift(s)))}\",
\"T\": \"{#Control(Alt(Shift(t)))}\",
\"-U\": \"{#Control(Alt(Shift(u)))}\",
\"SR\": \"{#Control(Alt(Shift(v)))}\",
\"W\": \"{#Control(Alt(Shift(w)))}\",
\"KP\": \"{#Control(Alt(Shift(x)))}\",
\"KWR\": \"{#Control(Alt(Shift(y)))}\",
\"STKPW\": \"{#Control(Alt(Shift(z)))}\",
\"A\": \"{#Control(Alt(Shift(Super(a))))}\",
\"PW\": \"{#Control(Alt(Shift(Super(b))))}\",
\"KR\": \"{#Control(Alt(Shift(Super(c))))}\",
\"TK\": \"{#Control(Alt(Shift(Super(d))))}\",
\"-E\": \"{#Control(Alt(Shift(Super(e))))}\",
\"TP\": \"{#Control(Alt(Shift(Super(f))))}\",
\"TKPW\": \"{#Control(Alt(Shift(Super(g))))}\",
\"H\": \"{#Control(Alt(Shift(Super(h))))}\",
\"-EU\": \"{#Control(Alt(Shift(Super(i))))}\",
\"SKWR\": \"{#Control(Alt(Shift(Super(j))))}\",
\"K\": \"{#Control(Alt(Shift(Super(k))))}\",
\"HR\": \"{#Control(Alt(Shift(Super(l))))}\",
\"PH\": \"{#Control(Alt(Shift(Super(m))))}\",
\"TPH\": \"{#Control(Alt(Shift(Super(n))))}\",
\"O\": \"{#Control(Alt(Shift(Super(o))))}\",
\"P\": \"{#Control(Alt(Shift(Super(p))))}\",
\"KW\": \"{#Control(Alt(Shift(Super(q))))}\",
\"R\": \"{#Control(Alt(Shift(Super(r))))}\",
\"S\": \"{#Control(Alt(Shift(Super(s))))}\",
\"T\": \"{#Control(Alt(Shift(Super(t))))}\",
\"-U\": \"{#Control(Alt(Shift(Super(u))))}\",
\"SR\": \"{#Control(Alt(Shift(Super(v))))}\",
\"W\": \"{#Control(Alt(Shift(Super(w))))}\",
\"KP\": \"{#Control(Alt(Shift(Super(x))))}\",
\"KWR\": \"{#Control(Alt(Shift(Super(y))))}\",
\"STKPW\": \"{#Control(Alt(Shift(Super(z))))}\",
"
#+end_example


The Escape key is distributed with Plover in the =commands.json=
dictionary as =TPEFBG=.  However, it's a little contorted for how
often it's used with Evil/Vim.  In Emacs, Escape also functions as
Meta when in the terminal, so it's probably a good idea to give it a
binding that's more accessible.  We could just translate the Alt
pattern over (⠲_), given the Escape/Alt relationship.  That feels awkward
to me and, since I am also a vim/evil user, I want a stronger feeling
binding:

#+begin_src js :tangle plover-emacs.json :exports code
"STW": "{#Escape}",
"-BLS": "{#Escape}",
#+end_src

* TODO Execute extended command and Quit
Perhaps the two most important bindings are =M-x=
(=execute-extended-command=) and =C-g= (=keyboard-quit=).  They
deserve single-handed, single strokes.

For people who are right-handed, the following allow for quick access
when using a mouse.

=ULT= sounds like "Alt".
#+begin_src js :tangle plover-emacs.json :exports code
"ULT": "{#Alt_L(x)}",
#+end_src

The word "control" has an 'r' and an 'n' in it.  Honestly, there's not
much of an association.  It's simply available and easy to write.
#+begin_src js :tangle plover-emacs.json :exports code
"-RPB": "{#Control(g)}",
#+end_src

* COMMENT Leader
Vim provides a key reserved for user defined functions called the
"leader". Any key binding that starts with the leader is guaranteed to
be available. Leader functionality is available in Emacs through
evil-mode or general.el.
#+begin_src js :tangle plover-emacs.json :exports code
"KWR-RBG": "{#Page_Down}",
#+end_src

* Function keys
It doesn't seem like =*= is used at all with numbers.  This means it
can be used to differentiate the F keys.

#+begin_src js :tangle plover-emacs.json :exports code
"*": "{#F1}",
"2*": "{#F2}",
"3*": "{#F3}",
"4*": "{#F4}",
"5*": "{#F5}",
"*6": "{#F6}",
"*7": "{#F7}",
"*8": "{#F8}",
"*9": "{#F9}",
"10*": "{#F10}",
"1*D": "{#F11}",
"2*D": "{#F12}",
#+end_src

* Notes
** Cross Platform Movement
From Ted Morin: [[http://www.openstenoproject.org/stenodict/dictionaries/cross_platform_movement.html][Cross Platform Movement]]

#+begin_quote
Movement

Like the Plover default dictionary, you activate movement keys by
using STPH- and then select the movement key with the right hand, as
below.

Use -R, -P, -B, and -G for left, up, down, and right.

In addition, page up and down are arrows made with the right hand:
Page Up is -RPG (up arrow). Page Down is -FBL (down arrow).

Home is -FPL (all three fingers up), End is -RBG (all three fingers
down.)

Finally, -RB is Control(Left), -BG is Control(Right). These jump words
left and right on Windows and Linux. For Mac, add an asterisk, and *RB
will make Option(Left), and *BG will make Option(Right).  Selection

To add Shift to any of the above (which will select text that you move
over), use SKWR- instead of STPH-.  Utility

Included for convenient is a set of arrow keys with the Super key
(Windows/Meta/Command depending on OS). On Windows, this will snap
windows to the sides of screens, maximize, and minimize them. On Mac,
you can jump to the beginning or end of lines or files. On Linux, the
behavior varies. To use this, it’s simply KPH* (command) and the four
arrows.  Deletion

Finally, I have a delete-word stroke for when Plover runs out of
buffer. Simply #* on Windows & Linux; I tend to use right index finger
for the asterisk, and the middle right finger for the number bar. On
Mac, I just use *F or *6 if I accidentally hit the number bar.
#+end_quote

#+begin_src js :exports code
{
"#*": "{#Control_L(BackSpace)}",
"*6": "{#Alt_L(BackSpace)}",
"*F": "{#Alt_L(BackSpace)}",
"KPH*B": "{#Super_L(Down)}",
"KPH*G": "{#Super_L(Right)}",
"KPH*P": "{#Super_L(Up)}",
"KPH*R": "{#Super_L(Left)}",
"SKWR*BG": "{#Alt_L(Shift_L(Right))}",
"SKWR*RB": "{#Alt_L(Shift_L(Left))}",
"SKWR-B": "{#Shift_L(Down)}",
"SKWR-BG": "{#Control_L(Shift_L(Right))}",
"SKWR-FBL": "{#Shift_L(Page_Down)}",
"SKWR-FPL": "{#Shift_L(Home)}",
"SKWR-G": "{#Shift_L(Right)}",
"SKWR-P": "{#Shift_L(Up)}",
"SKWR-R": "{#Shift_L(Left)}",
"SKWR-RB": "{#Control_L(Shift_L(Left))}",
"SKWR-RBG": "{#Shift_L(End)}",
"SKWR-RPG": "{#Shift_L(Page_Up)}",
"STPH*BG": "{#Alt_L(Right)}",
"STPH*RB": "{#Alt_L(Left)}",
"STPH-B": "{#Down}",
"STPH-BG": "{#Control_L(Right)}",
"STPH-FBL": "{#Page_Down}",
"STPH-FP": "{#Control_L(Super_L(Left))}",
"STPH-FPL": "{#Home}",
"STPH-G": "{#Right}",
"STPH-P": "{#Up}",
"STPH-R": "{#Left}",
"STPH-RB": "{#Control_L(Left)}",
"STPH-RBG": "{#End}",
"STPH-RPG": "{#Page_Up}"
}
#+end_src

** Modifiers Single Stroke
From DiDoesDigital: [[https://github.com/didoesdigital/steno-dictionaries/blob/master/dictionaries/modifiers-single-stroke.json][modifiers-single-stroke]]

- =*RPLT= as Super
- =*RBLT= as Super+Alt
- =*RPBLT= as Super+Shift
- =*RBL= as Control

#+begin_src js :exports code
{
"A*RPLT": "{#Super_L(a)}",
"PW*RPLT": "{#Super_L(b)}",
"KR*RPLT": "{#Super_L(c)}",
"TK*RPLT": "{#Super_L(d)}",
"*ERPLT": "{#Super_L(e)}",
"TP*RPLT": "{#Super_L(f)}",
"TKPW*RPLT": "{#Super_L(g)}",
"H*RPLT": "{#Super_L(h)}",
"*EURPLT": "{#Super_L(i)}",
"SKWR*RPLT": "{#Super_L(j)}",
"K*RPLT": "{#Super_L(k)}",
"HR*RPLT": "{#Super_L(l)}",
"PH*RPLT": "{#Super_L(m)}",
"TPH*RPLT": "{#Super_L(n)}",
"O*RPLT": "{#Super_L(o)}",
"P*RPLT": "{#Super_L(p)}",
"KW*RPLT": "{#Super_L(q)}",
"R*RPLT": "{#Super_L(r)}",
"S*RPLT": "{#Super_L(s)}",
"T*RPLT": "{#Super_L(t)}",
"*URPLT": "{#Super_L(u)}",
"SR*RPLT": "{#Super_L(v)}",
"W*RPLT": "{#Super_L(w)}",
"KP*RPLT": "{#Super_L(x)}",
"KWR*RPLT": "{#Super_L(y)}",
"STKPW*RPLT": "{#Super_L(z)}",
"A*RBLT": "{#Super_L(Alt_L(a))}",
"PW*RBLT": "{#Super_L(Alt_L(b))}",
"KR*RBLT": "{#Super_L(Alt_L(c))}",
"TK*RBLT": "{#Super_L(Alt_L(d))}",
"*ERBLT": "{#Super_L(Alt_L(e))}",
"TP*RBLT": "{#Super_L(Alt_L(f))}",
"TKPW*RBLT": "{#Super_L(Alt_L(g))}",
"H*RBLT": "{#Super_L(Alt_L(h))}",
"*EURBLT": "{#Super_L(Alt_L(i))}",
"SKWR*RBLT": "{#Super_L(Alt_L(j))}",
"K*RBLT": "{#Super_L(Alt_L(k))}",
"HR*RBLT": "{#Super_L(Alt_L(l))}",
"PH*RBLT": "{#Super_L(Alt_L(m))}",
"TPH*RBLT": "{#Super_L(Alt_L(n))}",
"O*RBLT": "{#Super_L(Alt_L(o))}",
"P*RBLT": "{#Super_L(Alt_L(p))}",
"KW*RBLT": "{#Super_L(Alt_L(q))}",
"R*RBLT": "{#Super_L(Alt_L(r))}",
"S*RBLT": "{#Super_L(Alt_L(s))}",
"T*RBLT": "{#Super_L(Alt_L(t))}",
"*URBLT": "{#Super_L(Alt_L(u))}",
"SR*RBLT": "{#Super_L(Alt_L(v))}",
"W*RBLT": "{#Super_L(Alt_L(w))}",
"KP*RBLT": "{#Super_L(Alt_L(x))}",
"KWR*RBLT": "{#Super_L(Alt_L(y))}",
"STKPW*RBLT": "{#Super_L(Alt_L(z))}",
"A*RPBLT": "{#Super_L(Shift_L(a))}",
"PW*RPBLT": "{#Super_L(Shift_L(b))}",
"KR*RPBLT": "{#Super_L(Shift_L(c))}",
"TK*RPBLT": "{#Super_L(Shift_L(d))}",
"*ERPBLT": "{#Super_L(Shift_L(e))}",
"TP*RPBLT": "{#Super_L(Shift_L(f))}",
"TKPW*RPBLT": "{#Super_L(Shift_L(g))}",
"H*RPBLT": "{#Super_L(Shift_L(h))}",
"*EURPBLT": "{#Super_L(Shift_L(i))}",
"SKWR*RPBLT": "{#Super_L(Shift_L(j))}",
"K*RPBLT": "{#Super_L(Shift_L(k))}",
"HR*RPBLT": "{#Super_L(Shift_L(l))}",
"PH*RPBLT": "{#Super_L(Shift_L(m))}",
"TPH*RPBLT": "{#Super_L(Shift_L(n))}",
"O*RPBLT": "{#Super_L(Shift_L(o))}",
"P*RPBLT": "{#Super_L(Shift_L(p))}",
"KW*RPBLT": "{#Super_L(Shift_L(q))}",
"R*RPBLT": "{#Super_L(Shift_L(r))}",
"S*RPBLT": "{#Super_L(Shift_L(s))}",
"T*RPBLT": "{#Super_L(Shift_L(t))}",
"*URPBLT": "{#Super_L(Shift_L(u))}",
"SR*RPBLT": "{#Super_L(Shift_L(v))}",
"W*RPBLT": "{#Super_L(Shift_L(w))}",
"KP*RPBLT": "{#Super_L(Shift_L(x))}",
"KWR*RPBLT": "{#Super_L(Shift_L(y))}",
"STKPW*RPBLT": "{#Super_L(Shift_L(z))}",
"1-RG": "{^}{#Control_L(F1)}{^}",
"2-RG": "{^}{#Control_L(F2)}{^}",
"3-RG": "{^}{#Control_L(F3)}{^}",
"4-RG": "{^}{#Control_L(F4)}{^}",
"5-RG": "{^}{#Control_L(F5)}{^}",
"KR-6": "{^}{#Control_L(F6)}{^}",
"KR-7": "{^}{#Control_L(F7)}{^}",
"KR-8": "{^}{#Control_L(F8)}{^}",
"KR-9": "{^}{#Control_L(F9)}{^}",
"10-RG": "{^}{#Control_L(F10)}{^}",
"11-RG": "{^}{#Control_L(F11)}{^}",
"12-RG": "{^}{#Control_L(F12)}{^}",
"A*RBL": "{#Control_L(a)}",
"PW*RBL": "{#Control_L(b)}",
"KR*RBL": "{#Control_L(c)}",
"TK*RBL": "{#Control_L(d)}",
"*ERBL": "{#Control_L(e)}",
"TP*RBL": "{#Control_L(f)}",
"TKPW*RBL": "{#Control_L(g)}",
"H*RBL": "{#Control_L(h)}",
"*EURBL": "{#Control_L(i)}",
"SKWR*RBL": "{#Control_L(j)}",
"K*RBL": "{#Control_L(k)}",
"HR*RBL": "{#Control_L(l)}",
"PH*RBL": "{#Control_L(m)}",
"TPH*RBL": "{#Control_L(n)}",
"O*RBL": "{#Control_L(o)}",
"P*RBL": "{#Control_L(p)}",
"KW*RBL": "{#Control_L(q)}",
"R*RBL": "{#Control_L(r)}",
"S*RBL": "{#Control_L(s)}",
"T*RBL": "{#Control_L(t)}",
"*URBL": "{#Control_L(u)}",
"SR*RBL": "{#Control_L(v)}",
"W*RBL": "{#Control_L(w)}",
"KP*RBL": "{#Control_L(x)}",
"KWR*RBL": "{#Control_L(y)}",
"STKPW*RBL": "{#Control_L(z)}",
"WUZ/WUZ": "{#}"
}
#+end_src

** Nimble single strokes
From Joshua Grams: [[https://gist.githubusercontent.com/JoshuaGrams/4847241da6a5678f7ee11ffccb79d583/raw/61c14180a277dd7f95a09326258a3da19698b107/nimble-single-stroke.json][nimble-single-strokes]]

- =-FLGT= for Alt
- =-BLGT= for Control
- =-RLGT= for Shift
- =-PLGT= for Super
- =-PBLGT= for Super+Control
- =-FPLGT= for Super+Alt
- =-RPLGT= for Super+Shift
- =-FBLGT= for Control+Alt
- =-RBLGT= for Control+Shift
- =-FRLGT= for Alt+Shift
- =-FPBLGT= for Super+Control+Alt
- =-FRPLGT= for Super+Alt+Shift
- =-FRBLGT= for Control+Alt+Shift
- =-FRPBLGT= for Super+Control+Alt+Shift

#+begin_src js :exports code
{
        "1-8G9": "{#F1}",
        "2-8G9": "{#F2}",
        "3-8G9": "{#F3}",
        "4-8G9": "{#F4}",
        "12-8G9": "{#F5}",
        "23-8G9": "{#F6}",
        "34-8G9": "{#F7}",
        "123-8G9": "{#F8}",
        "234-8G9": "{#F9}",
        "14-8G9": "{#F10}",
        "13-8G9": "{#F11}",
        "24-8G9": "{#F12}",
        "STK-P": "{#up}",
        "STK-R": "{#left}",
        "STK-B": "{#down}",
        "STK-G": "{#right}",
        "STK-RPG": "{#page_up}",
        "STK-FBL": "{#page_down}",
        "STK-FPL": "{#home}",
        "STK-RBG": "{#end}",
        "STK-RB": "{#return}",
        "STK-F": "{#backspace}",
        "STK-L": "{#delete}",
        "STK-FR": "{#escape}",
        "STK-LG": "{#tab}",
        "STK-RP": "{#slash}",
        "STK-PG": "{#backslash}",
        "STKP": "{#Super_L()}",
        "APLGT": "{#Super_L(a)}",
        "PW-PLGT": "{#Super_L(b)}",
        "KR-PLGT": "{#Super_L(c)}",
        "TK-PLGT": "{#Super_L(d)}",
        "EPLGT": "{#Super_L(e)}",
        "TP-PLGT": "{#Super_L(f)}",
        "TKPW-PLGT": "{#Super_L(g)}",
        "H-PLGT": "{#Super_L(h)}",
        "EUPLGT": "{#Super_L(i)}",
        "SKWR-PLGT": "{#Super_L(j)}",
        "K-PLGT": "{#Super_L(k)}",
        "HR-PLGT": "{#Super_L(l)}",
        "PH-PLGT": "{#Super_L(m)}",
        "TPH-PLGT": "{#Super_L(n)}",
        "OPLGT": "{#Super_L(o)}",
        "P-PLGT": "{#Super_L(p)}",
        "KW-PLGT": "{#Super_L(q)}",
        "R-PLGT": "{#Super_L(r)}",
        "S-PLGT": "{#Super_L(s)}",
        "T-PLGT": "{#Super_L(t)}",
        "UPLGT": "{#Super_L(u)}",
        "SR-PLGT": "{#Super_L(v)}",
        "W-PLGT": "{#Super_L(w)}",
        "KP-PLGT": "{#Super_L(x)}",
        "KWR-PLGT": "{#Super_L(y)}",
        "STKPW-PLGT": "{#Super_L(z)}",
        "1-78G9": "{#Super_L(F1)}",
        "2-78G9": "{#Super_L(F2)}",
        "3-78G9": "{#Super_L(F3)}",
        "4-78G9": "{#Super_L(F4)}",
        "12-78G9": "{#Super_L(F5)}",
        "23-78G9": "{#Super_L(F6)}",
        "34-78G9": "{#Super_L(F7)}",
        "123-78G9": "{#Super_L(F8)}",
        "234-78G9": "{#Super_L(F9)}",
        "14-78G9": "{#Super_L(F10)}",
        "13-78G9": "{#Super_L(F11)}",
        "24-78G9": "{#Super_L(F12)}",
        "STKP-P": "{#Super_L(up)}",
        "STKP-R": "{#Super_L(left)}",
        "STKP-B": "{#Super_L(down)}",
        "STKP-G": "{#Super_L(right)}",
        "STKP-RPG": "{#Super_L(page_up)}",
        "STKP-FBL": "{#Super_L(page_down)}",
        "STKP-FPL": "{#Super_L(home)}",
        "STKP-RBG": "{#Super_L(end)}",
        "STKP-RB": "{#Super_L(return)}",
        "STKP-F": "{#Super_L(backspace)}",
        "STKP-L": "{#Super_L(delete)}",
        "STKP-FR": "{#Super_L(escape)}",
        "STKP-LG": "{#Super_L(tab)}",
        "STKP-RP": "{#Super_L(slash)}",
        "STKP-PG": "{#Super_L(backslash)}",
        "STKW": "{#Control_L()}",
        "ABLGT": "{#Control_L(a)}",
        "PW-BLGT": "{#Control_L(b)}",
        "KR-BLGT": "{#Control_L(c)}",
        "TK-BLGT": "{#Control_L(d)}",
        "EBLGT": "{#Control_L(e)}",
        "TP-BLGT": "{#Control_L(f)}",
        "TKPW-BLGT": "{#Control_L(g)}",
        "H-BLGT": "{#Control_L(h)}",
        "EUBLGT": "{#Control_L(i)}",
        "SKWR-BLGT": "{#Control_L(j)}",
        "K-BLGT": "{#Control_L(k)}",
        "HR-BLGT": "{#Control_L(l)}",
        "PH-BLGT": "{#Control_L(m)}",
        "TPH-BLGT": "{#Control_L(n)}",
        "OBLGT": "{#Control_L(o)}",
        "P-BLGT": "{#Control_L(p)}",
        "KW-BLGT": "{#Control_L(q)}",
        "R-BLGT": "{#Control_L(r)}",
        "S-BLGT": "{#Control_L(s)}",
        "T-BLGT": "{#Control_L(t)}",
        "UBLGT": "{#Control_L(u)}",
        "SR-BLGT": "{#Control_L(v)}",
        "W-BLGT": "{#Control_L(w)}",
        "KP-BLGT": "{#Control_L(x)}",
        "KWR-BLGT": "{#Control_L(y)}",
        "STKPW-BLGT": "{#Control_L(z)}",
        "1-B8G9": "{#Control_L(F1)}",
        "2-B8G9": "{#Control_L(F2)}",
        "3-B8G9": "{#Control_L(F3)}",
        "4-B8G9": "{#Control_L(F4)}",
        "12-B8G9": "{#Control_L(F5)}",
        "23-B8G9": "{#Control_L(F6)}",
        "34-B8G9": "{#Control_L(F7)}",
        "123-B8G9": "{#Control_L(F8)}",
        "234-B8G9": "{#Control_L(F9)}",
        "14-B8G9": "{#Control_L(F10)}",
        "13-B8G9": "{#Control_L(F11)}",
        "24-B8G9": "{#Control_L(F12)}",
        "STKW-P": "{#Control_L(up)}",
        "STKW-R": "{#Control_L(left)}",
        "STKW-B": "{#Control_L(down)}",
        "STKW-G": "{#Control_L(right)}",
        "STKW-RPG": "{#Control_L(page_up)}",
        "STKW-FBL": "{#Control_L(page_down)}",
        "STKW-FPL": "{#Control_L(home)}",
        "STKW-RBG": "{#Control_L(end)}",
        "STKW-RB": "{#Control_L(return)}",
        "STKW-F": "{#Control_L(backspace)}",
        "STKW-L": "{#Control_L(delete)}",
        "STKW-FR": "{#Control_L(escape)}",
        "STKW-LG": "{#Control_L(tab)}",
        "STKW-RP": "{#Control_L(slash)}",
        "STKW-PG": "{#Control_L(backslash)}",
        "STKH": "{#Alt_L()}",
        "AFLGT": "{#Alt_L(a)}",
        "PW-FLGT": "{#Alt_L(b)}",
        "KR-FLGT": "{#Alt_L(c)}",
        "TK-FLGT": "{#Alt_L(d)}",
        "EFLGT": "{#Alt_L(e)}",
        "TP-FLGT": "{#Alt_L(f)}",
        "TKPW-FLGT": "{#Alt_L(g)}",
        "H-FLGT": "{#Alt_L(h)}",
        "EUFLGT": "{#Alt_L(i)}",
        "SKWR-FLGT": "{#Alt_L(j)}",
        "K-FLGT": "{#Alt_L(k)}",
        "HR-FLGT": "{#Alt_L(l)}",
        "PH-FLGT": "{#Alt_L(m)}",
        "TPH-FLGT": "{#Alt_L(n)}",
        "OFLGT": "{#Alt_L(o)}",
        "P-FLGT": "{#Alt_L(p)}",
        "KW-FLGT": "{#Alt_L(q)}",
        "R-FLGT": "{#Alt_L(r)}",
        "S-FLGT": "{#Alt_L(s)}",
        "T-FLGT": "{#Alt_L(t)}",
        "UFLGT": "{#Alt_L(u)}",
        "SR-FLGT": "{#Alt_L(v)}",
        "W-FLGT": "{#Alt_L(w)}",
        "KP-FLGT": "{#Alt_L(x)}",
        "KWR-FLGT": "{#Alt_L(y)}",
        "STKPW-FLGT": "{#Alt_L(z)}",
        "1-68G9": "{#Alt_L(F1)}",
        "2-68G9": "{#Alt_L(F2)}",
        "3-68G9": "{#Alt_L(F3)}",
        "4-68G9": "{#Alt_L(F4)}",
        "12-68G9": "{#Alt_L(F5)}",
        "23-68G9": "{#Alt_L(F6)}",
        "34-68G9": "{#Alt_L(F7)}",
        "123-68G9": "{#Alt_L(F8)}",
        "234-68G9": "{#Alt_L(F9)}",
        "14-68G9": "{#Alt_L(F10)}",
        "13-68G9": "{#Alt_L(F11)}",
        "24-68G9": "{#Alt_L(F12)}",
        "STKH-P": "{#Alt_L(up)}",
        "STKH-R": "{#Alt_L(left)}",
        "STKH-B": "{#Alt_L(down)}",
        "STKH-G": "{#Alt_L(right)}",
        "STKH-RPG": "{#Alt_L(page_up)}",
        "STKH-FBL": "{#Alt_L(page_down)}",
        "STKH-FPL": "{#Alt_L(home)}",
        "STKH-RBG": "{#Alt_L(end)}",
        "STKH-RB": "{#Alt_L(return)}",
        "STKH-F": "{#Alt_L(backspace)}",
        "STKH-L": "{#Alt_L(delete)}",
        "STKH-FR": "{#Alt_L(escape)}",
        "STKH-LG": "{#Alt_L(tab)}",
        "STKH-RP": "{#Alt_L(slash)}",
        "STKH-PG": "{#Alt_L(backslash)}",
        "STKR": "{#Shift_L()}",
        "ARLGT": "{#Shift_L(a)}",
        "PW-RLGT": "{#Shift_L(b)}",
        "KR-RLGT": "{#Shift_L(c)}",
        "TK-RLGT": "{#Shift_L(d)}",
        "ERLGT": "{#Shift_L(e)}",
        "TP-RLGT": "{#Shift_L(f)}",
        "TKPW-RLGT": "{#Shift_L(g)}",
        "H-RLGT": "{#Shift_L(h)}",
        "EURLGT": "{#Shift_L(i)}",
        "SKWR-RLGT": "{#Shift_L(j)}",
        "K-RLGT": "{#Shift_L(k)}",
        "HR-RLGT": "{#Shift_L(l)}",
        "PH-RLGT": "{#Shift_L(m)}",
        "TPH-RLGT": "{#Shift_L(n)}",
        "ORLGT": "{#Shift_L(o)}",
        "P-RLGT": "{#Shift_L(p)}",
        "KW-RLGT": "{#Shift_L(q)}",
        "R-RLGT": "{#Shift_L(r)}",
        "S-RLGT": "{#Shift_L(s)}",
        "T-RLGT": "{#Shift_L(t)}",
        "URLGT": "{#Shift_L(u)}",
        "SR-RLGT": "{#Shift_L(v)}",
        "W-RLGT": "{#Shift_L(w)}",
        "KP-RLGT": "{#Shift_L(x)}",
        "KWR-RLGT": "{#Shift_L(y)}",
        "STKPW-RLGT": "{#Shift_L(z)}",
        "1-R8G9": "{#Shift_L(F1)}",
        "2-R8G9": "{#Shift_L(F2)}",
        "3-R8G9": "{#Shift_L(F3)}",
        "4-R8G9": "{#Shift_L(F4)}",
        "12-R8G9": "{#Shift_L(F5)}",
        "23-R8G9": "{#Shift_L(F6)}",
        "34-R8G9": "{#Shift_L(F7)}",
        "123-R8G9": "{#Shift_L(F8)}",
        "234-R8G9": "{#Shift_L(F9)}",
        "14-R8G9": "{#Shift_L(F10)}",
        "13-R8G9": "{#Shift_L(F11)}",
        "24-R8G9": "{#Shift_L(F12)}",
        "STKR-P": "{#Shift_L(up)}",
        "STKR-R": "{#Shift_L(left)}",
        "STKR-B": "{#Shift_L(down)}",
        "STKR-G": "{#Shift_L(right)}",
        "STKR-RPG": "{#Shift_L(page_up)}",
        "STKR-FBL": "{#Shift_L(page_down)}",
        "STKR-FPL": "{#Shift_L(home)}",
        "STKR-RBG": "{#Shift_L(end)}",
        "STKR-RB": "{#Shift_L(return)}",
        "STKR-F": "{#Shift_L(backspace)}",
        "STKR-L": "{#Shift_L(delete)}",
        "STKR-FR": "{#Shift_L(escape)}",
        "STKR-LG": "{#Shift_L(tab)}",
        "STKR-RP": "{#Shift_L(slash)}",
        "STKR-PG": "{#Shift_L(backslash)}",
        "STKPW": "{#Super_L(Control_L())}",
        "APBLGT": "{#Super_L(Control_L(a))}",
        "PW-PBLGT": "{#Super_L(Control_L(b))}",
        "KR-PBLGT": "{#Super_L(Control_L(c))}",
        "TK-PBLGT": "{#Super_L(Control_L(d))}",
        "EPBLGT": "{#Super_L(Control_L(e))}",
        "TP-PBLGT": "{#Super_L(Control_L(f))}",
        "TKPW-PBLGT": "{#Super_L(Control_L(g))}",
        "H-PBLGT": "{#Super_L(Control_L(h))}",
        "EUPBLGT": "{#Super_L(Control_L(i))}",
        "SKWR-PBLGT": "{#Super_L(Control_L(j))}",
        "K-PBLGT": "{#Super_L(Control_L(k))}",
        "HR-PBLGT": "{#Super_L(Control_L(l))}",
        "PH-PBLGT": "{#Super_L(Control_L(m))}",
        "TPH-PBLGT": "{#Super_L(Control_L(n))}",
        "OPBLGT": "{#Super_L(Control_L(o))}",
        "P-PBLGT": "{#Super_L(Control_L(p))}",
        "KW-PBLGT": "{#Super_L(Control_L(q))}",
        "R-PBLGT": "{#Super_L(Control_L(r))}",
        "S-PBLGT": "{#Super_L(Control_L(s))}",
        "T-PBLGT": "{#Super_L(Control_L(t))}",
        "UPBLGT": "{#Super_L(Control_L(u))}",
        "SR-PBLGT": "{#Super_L(Control_L(v))}",
        "W-PBLGT": "{#Super_L(Control_L(w))}",
        "KP-PBLGT": "{#Super_L(Control_L(x))}",
        "KWR-PBLGT": "{#Super_L(Control_L(y))}",
        "STKPW-PBLGT": "{#Super_L(Control_L(z))}",
        "1-7B8G9": "{#Super_L(Control_L(F1))}",
        "2-7B8G9": "{#Super_L(Control_L(F2))}",
        "3-7B8G9": "{#Super_L(Control_L(F3))}",
        "4-7B8G9": "{#Super_L(Control_L(F4))}",
        "12-7B8G9": "{#Super_L(Control_L(F5))}",
        "23-7B8G9": "{#Super_L(Control_L(F6))}",
        "34-7B8G9": "{#Super_L(Control_L(F7))}",
        "123-7B8G9": "{#Super_L(Control_L(F8))}",
        "234-7B8G9": "{#Super_L(Control_L(F9))}",
        "14-7B8G9": "{#Super_L(Control_L(F10))}",
        "13-7B8G9": "{#Super_L(Control_L(F11))}",
        "24-7B8G9": "{#Super_L(Control_L(F12))}",
        "STKPW-P": "{#Super_L(Control_L(up))}",
        "STKPW-R": "{#Super_L(Control_L(left))}",
        "STKPW-B": "{#Super_L(Control_L(down))}",
        "STKPW-G": "{#Super_L(Control_L(right))}",
        "STKPW-RPG": "{#Super_L(Control_L(page_up))}",
        "STKPW-FBL": "{#Super_L(Control_L(page_down))}",
        "STKPW-FPL": "{#Super_L(Control_L(home))}",
        "STKPW-RBG": "{#Super_L(Control_L(end))}",
        "STKPW-RB": "{#Super_L(Control_L(return))}",
        "STKPW-F": "{#Super_L(Control_L(backspace))}",
        "STKPW-L": "{#Super_L(Control_L(delete))}",
        "STKPW-FR": "{#Super_L(Control_L(escape))}",
        "STKPW-LG": "{#Super_L(Control_L(tab))}",
        "STKPW-RP": "{#Super_L(Control_L(slash))}",
        "STKPW-PG": "{#Super_L(Control_L(backslash))}",
        "STKPH": "{#Super_L(Alt_L())}",
        "AFPLGT": "{#Super_L(Alt_L(a))}",
        "PW-FPLGT": "{#Super_L(Alt_L(b))}",
        "KR-FPLGT": "{#Super_L(Alt_L(c))}",
        "TK-FPLGT": "{#Super_L(Alt_L(d))}",
        "EFPLGT": "{#Super_L(Alt_L(e))}",
        "TP-FPLGT": "{#Super_L(Alt_L(f))}",
        "TKPW-FPLGT": "{#Super_L(Alt_L(g))}",
        "H-FPLGT": "{#Super_L(Alt_L(h))}",
        "EUFPLGT": "{#Super_L(Alt_L(i))}",
        "SKWR-FPLGT": "{#Super_L(Alt_L(j))}",
        "K-FPLGT": "{#Super_L(Alt_L(k))}",
        "HR-FPLGT": "{#Super_L(Alt_L(l))}",
        "PH-FPLGT": "{#Super_L(Alt_L(m))}",
        "TPH-FPLGT": "{#Super_L(Alt_L(n))}",
        "OFPLGT": "{#Super_L(Alt_L(o))}",
        "P-FPLGT": "{#Super_L(Alt_L(p))}",
        "KW-FPLGT": "{#Super_L(Alt_L(q))}",
        "R-FPLGT": "{#Super_L(Alt_L(r))}",
        "S-FPLGT": "{#Super_L(Alt_L(s))}",
        "T-FPLGT": "{#Super_L(Alt_L(t))}",
        "UFPLGT": "{#Super_L(Alt_L(u))}",
        "SR-FPLGT": "{#Super_L(Alt_L(v))}",
        "W-FPLGT": "{#Super_L(Alt_L(w))}",
        "KP-FPLGT": "{#Super_L(Alt_L(x))}",
        "KWR-FPLGT": "{#Super_L(Alt_L(y))}",
        "STKPW-FPLGT": "{#Super_L(Alt_L(z))}",
        "1-678G9": "{#Super_L(Alt_L(F1))}",
        "2-678G9": "{#Super_L(Alt_L(F2))}",
        "3-678G9": "{#Super_L(Alt_L(F3))}",
        "4-678G9": "{#Super_L(Alt_L(F4))}",
        "12-678G9": "{#Super_L(Alt_L(F5))}",
        "23-678G9": "{#Super_L(Alt_L(F6))}",
        "34-678G9": "{#Super_L(Alt_L(F7))}",
        "123-678G9": "{#Super_L(Alt_L(F8))}",
        "234-678G9": "{#Super_L(Alt_L(F9))}",
        "14-678G9": "{#Super_L(Alt_L(F10))}",
        "13-678G9": "{#Super_L(Alt_L(F11))}",
        "24-678G9": "{#Super_L(Alt_L(F12))}",
        "STKPH-P": "{#Super_L(Alt_L(up))}",
        "STKPH-R": "{#Super_L(Alt_L(left))}",
        "STKPH-B": "{#Super_L(Alt_L(down))}",
        "STKPH-G": "{#Super_L(Alt_L(right))}",
        "STKPH-RPG": "{#Super_L(Alt_L(page_up))}",
        "STKPH-FBL": "{#Super_L(Alt_L(page_down))}",
        "STKPH-FPL": "{#Super_L(Alt_L(home))}",
        "STKPH-RBG": "{#Super_L(Alt_L(end))}",
        "STKPH-RB": "{#Super_L(Alt_L(return))}",
        "STKPH-F": "{#Super_L(Alt_L(backspace))}",
        "STKPH-L": "{#Super_L(Alt_L(delete))}",
        "STKPH-FR": "{#Super_L(Alt_L(escape))}",
        "STKPH-LG": "{#Super_L(Alt_L(tab))}",
        "STKPH-RP": "{#Super_L(Alt_L(slash))}",
        "STKPH-PG": "{#Super_L(Alt_L(backslash))}",
        "STKPR": "{#Super_L(Shift_L())}",
        "ARPLGT": "{#Super_L(Shift_L(a))}",
        "PW-RPLGT": "{#Super_L(Shift_L(b))}",
        "KR-RPLGT": "{#Super_L(Shift_L(c))}",
        "TK-RPLGT": "{#Super_L(Shift_L(d))}",
        "ERPLGT": "{#Super_L(Shift_L(e))}",
        "TP-RPLGT": "{#Super_L(Shift_L(f))}",
        "TKPW-RPLGT": "{#Super_L(Shift_L(g))}",
        "H-RPLGT": "{#Super_L(Shift_L(h))}",
        "EURPLGT": "{#Super_L(Shift_L(i))}",
        "SKWR-RPLGT": "{#Super_L(Shift_L(j))}",
        "K-RPLGT": "{#Super_L(Shift_L(k))}",
        "HR-RPLGT": "{#Super_L(Shift_L(l))}",
        "PH-RPLGT": "{#Super_L(Shift_L(m))}",
        "TPH-RPLGT": "{#Super_L(Shift_L(n))}",
        "ORPLGT": "{#Super_L(Shift_L(o))}",
        "P-RPLGT": "{#Super_L(Shift_L(p))}",
        "KW-RPLGT": "{#Super_L(Shift_L(q))}",
        "R-RPLGT": "{#Super_L(Shift_L(r))}",
        "S-RPLGT": "{#Super_L(Shift_L(s))}",
        "T-RPLGT": "{#Super_L(Shift_L(t))}",
        "URPLGT": "{#Super_L(Shift_L(u))}",
        "SR-RPLGT": "{#Super_L(Shift_L(v))}",
        "W-RPLGT": "{#Super_L(Shift_L(w))}",
        "KP-RPLGT": "{#Super_L(Shift_L(x))}",
        "KWR-RPLGT": "{#Super_L(Shift_L(y))}",
        "STKPW-RPLGT": "{#Super_L(Shift_L(z))}",
        "1-R78G9": "{#Super_L(Shift_L(F1))}",
        "2-R78G9": "{#Super_L(Shift_L(F2))}",
        "3-R78G9": "{#Super_L(Shift_L(F3))}",
        "4-R78G9": "{#Super_L(Shift_L(F4))}",
        "12-R78G9": "{#Super_L(Shift_L(F5))}",
        "23-R78G9": "{#Super_L(Shift_L(F6))}",
        "34-R78G9": "{#Super_L(Shift_L(F7))}",
        "123-R78G9": "{#Super_L(Shift_L(F8))}",
        "234-R78G9": "{#Super_L(Shift_L(F9))}",
        "14-R78G9": "{#Super_L(Shift_L(F10))}",
        "13-R78G9": "{#Super_L(Shift_L(F11))}",
        "24-R78G9": "{#Super_L(Shift_L(F12))}",
        "STKPR-P": "{#Super_L(Shift_L(up))}",
        "STKPR-R": "{#Super_L(Shift_L(left))}",
        "STKPR-B": "{#Super_L(Shift_L(down))}",
        "STKPR-G": "{#Super_L(Shift_L(right))}",
        "STKPR-RPG": "{#Super_L(Shift_L(page_up))}",
        "STKPR-FBL": "{#Super_L(Shift_L(page_down))}",
        "STKPR-FPL": "{#Super_L(Shift_L(home))}",
        "STKPR-RBG": "{#Super_L(Shift_L(end))}",
        "STKPR-RB": "{#Super_L(Shift_L(return))}",
        "STKPR-F": "{#Super_L(Shift_L(backspace))}",
        "STKPR-L": "{#Super_L(Shift_L(delete))}",
        "STKPR-FR": "{#Super_L(Shift_L(escape))}",
        "STKPR-LG": "{#Super_L(Shift_L(tab))}",
        "STKPR-RP": "{#Super_L(Shift_L(slash))}",
        "STKPR-PG": "{#Super_L(Shift_L(backslash))}",
        "STKWH": "{#Control_L(Alt_L())}",
        "AFBLGT": "{#Control_L(Alt_L(a))}",
        "PW-FBLGT": "{#Control_L(Alt_L(b))}",
        "KR-FBLGT": "{#Control_L(Alt_L(c))}",
        "TK-FBLGT": "{#Control_L(Alt_L(d))}",
        "EFBLGT": "{#Control_L(Alt_L(e))}",
        "TP-FBLGT": "{#Control_L(Alt_L(f))}",
        "TKPW-FBLGT": "{#Control_L(Alt_L(g))}",
        "H-FBLGT": "{#Control_L(Alt_L(h))}",
        "EUFBLGT": "{#Control_L(Alt_L(i))}",
        "SKWR-FBLGT": "{#Control_L(Alt_L(j))}",
        "K-FBLGT": "{#Control_L(Alt_L(k))}",
        "HR-FBLGT": "{#Control_L(Alt_L(l))}",
        "PH-FBLGT": "{#Control_L(Alt_L(m))}",
        "TPH-FBLGT": "{#Control_L(Alt_L(n))}",
        "OFBLGT": "{#Control_L(Alt_L(o))}",
        "P-FBLGT": "{#Control_L(Alt_L(p))}",
        "KW-FBLGT": "{#Control_L(Alt_L(q))}",
        "R-FBLGT": "{#Control_L(Alt_L(r))}",
        "S-FBLGT": "{#Control_L(Alt_L(s))}",
        "T-FBLGT": "{#Control_L(Alt_L(t))}",
        "UFBLGT": "{#Control_L(Alt_L(u))}",
        "SR-FBLGT": "{#Control_L(Alt_L(v))}",
        "W-FBLGT": "{#Control_L(Alt_L(w))}",
        "KP-FBLGT": "{#Control_L(Alt_L(x))}",
        "KWR-FBLGT": "{#Control_L(Alt_L(y))}",
        "STKPW-FBLGT": "{#Control_L(Alt_L(z))}",
        "1-6B8G9": "{#Control_L(Alt_L(F1))}",
        "2-6B8G9": "{#Control_L(Alt_L(F2))}",
        "3-6B8G9": "{#Control_L(Alt_L(F3))}",
        "4-6B8G9": "{#Control_L(Alt_L(F4))}",
        "12-6B8G9": "{#Control_L(Alt_L(F5))}",
        "23-6B8G9": "{#Control_L(Alt_L(F6))}",
        "34-6B8G9": "{#Control_L(Alt_L(F7))}",
        "123-6B8G9": "{#Control_L(Alt_L(F8))}",
        "234-6B8G9": "{#Control_L(Alt_L(F9))}",
        "14-6B8G9": "{#Control_L(Alt_L(F10))}",
        "13-6B8G9": "{#Control_L(Alt_L(F11))}",
        "24-6B8G9": "{#Control_L(Alt_L(F12))}",
        "STKWH-P": "{#Control_L(Alt_L(up))}",
        "STKWH-R": "{#Control_L(Alt_L(left))}",
        "STKWH-B": "{#Control_L(Alt_L(down))}",
        "STKWH-G": "{#Control_L(Alt_L(right))}",
        "STKWH-RPG": "{#Control_L(Alt_L(page_up))}",
        "STKWH-FBL": "{#Control_L(Alt_L(page_down))}",
        "STKWH-FPL": "{#Control_L(Alt_L(home))}",
        "STKWH-RBG": "{#Control_L(Alt_L(end))}",
        "STKWH-RB": "{#Control_L(Alt_L(return))}",
        "STKWH-F": "{#Control_L(Alt_L(backspace))}",
        "STKWH-L": "{#Control_L(Alt_L(delete))}",
        "STKWH-FR": "{#Control_L(Alt_L(escape))}",
        "STKWH-LG": "{#Control_L(Alt_L(tab))}",
        "STKWH-RP": "{#Control_L(Alt_L(slash))}",
        "STKWH-PG": "{#Control_L(Alt_L(backslash))}",
        "STKWR": "{#Control_L(Shift_L())}",
        "ARBLGT": "{#Control_L(Shift_L(a))}",
        "PW-RBLGT": "{#Control_L(Shift_L(b))}",
        "KR-RBLGT": "{#Control_L(Shift_L(c))}",
        "TK-RBLGT": "{#Control_L(Shift_L(d))}",
        "ERBLGT": "{#Control_L(Shift_L(e))}",
        "TP-RBLGT": "{#Control_L(Shift_L(f))}",
        "TKPW-RBLGT": "{#Control_L(Shift_L(g))}",
        "H-RBLGT": "{#Control_L(Shift_L(h))}",
        "EURBLGT": "{#Control_L(Shift_L(i))}",
        "SKWR-RBLGT": "{#Control_L(Shift_L(j))}",
        "K-RBLGT": "{#Control_L(Shift_L(k))}",
        "HR-RBLGT": "{#Control_L(Shift_L(l))}",
        "PH-RBLGT": "{#Control_L(Shift_L(m))}",
        "TPH-RBLGT": "{#Control_L(Shift_L(n))}",
        "ORBLGT": "{#Control_L(Shift_L(o))}",
        "P-RBLGT": "{#Control_L(Shift_L(p))}",
        "KW-RBLGT": "{#Control_L(Shift_L(q))}",
        "R-RBLGT": "{#Control_L(Shift_L(r))}",
        "S-RBLGT": "{#Control_L(Shift_L(s))}",
        "T-RBLGT": "{#Control_L(Shift_L(t))}",
        "URBLGT": "{#Control_L(Shift_L(u))}",
        "SR-RBLGT": "{#Control_L(Shift_L(v))}",
        "W-RBLGT": "{#Control_L(Shift_L(w))}",
        "KP-RBLGT": "{#Control_L(Shift_L(x))}",
        "KWR-RBLGT": "{#Control_L(Shift_L(y))}",
        "STKPW-RBLGT": "{#Control_L(Shift_L(z))}",
        "1-RB8G9": "{#Control_L(Shift_L(F1))}",
        "2-RB8G9": "{#Control_L(Shift_L(F2))}",
        "3-RB8G9": "{#Control_L(Shift_L(F3))}",
        "4-RB8G9": "{#Control_L(Shift_L(F4))}",
        "12-RB8G9": "{#Control_L(Shift_L(F5))}",
        "23-RB8G9": "{#Control_L(Shift_L(F6))}",
        "34-RB8G9": "{#Control_L(Shift_L(F7))}",
        "123-RB8G9": "{#Control_L(Shift_L(F8))}",
        "234-RB8G9": "{#Control_L(Shift_L(F9))}",
        "14-RB8G9": "{#Control_L(Shift_L(F10))}",
        "13-RB8G9": "{#Control_L(Shift_L(F11))}",
        "24-RB8G9": "{#Control_L(Shift_L(F12))}",
        "STKWR-P": "{#Control_L(Shift_L(up))}",
        "STKWR-R": "{#Control_L(Shift_L(left))}",
        "STKWR-B": "{#Control_L(Shift_L(down))}",
        "STKWR-G": "{#Control_L(Shift_L(right))}",
        "STKWR-RPG": "{#Control_L(Shift_L(page_up))}",
        "STKWR-FBL": "{#Control_L(Shift_L(page_down))}",
        "STKWR-FPL": "{#Control_L(Shift_L(home))}",
        "STKWR-RBG": "{#Control_L(Shift_L(end))}",
        "STKWR-RB": "{#Control_L(Shift_L(return))}",
        "STKWR-F": "{#Control_L(Shift_L(backspace))}",
        "STKWR-L": "{#Control_L(Shift_L(delete))}",
        "STKWR-FR": "{#Control_L(Shift_L(escape))}",
        "STKWR-LG": "{#Control_L(Shift_L(tab))}",
        "STKWR-RP": "{#Control_L(Shift_L(slash))}",
        "STKWR-PG": "{#Control_L(Shift_L(backslash))}",
        "STKHR": "{#Alt_L(Shift_L())}",
        "AFRLGT": "{#Alt_L(Shift_L(a))}",
        "PW-FRLGT": "{#Alt_L(Shift_L(b))}",
        "KR-FRLGT": "{#Alt_L(Shift_L(c))}",
        "TK-FRLGT": "{#Alt_L(Shift_L(d))}",
        "EFRLGT": "{#Alt_L(Shift_L(e))}",
        "TP-FRLGT": "{#Alt_L(Shift_L(f))}",
        "TKPW-FRLGT": "{#Alt_L(Shift_L(g))}",
        "H-FRLGT": "{#Alt_L(Shift_L(h))}",
        "EUFRLGT": "{#Alt_L(Shift_L(i))}",
        "SKWR-FRLGT": "{#Alt_L(Shift_L(j))}",
        "K-FRLGT": "{#Alt_L(Shift_L(k))}",
        "HR-FRLGT": "{#Alt_L(Shift_L(l))}",
        "PH-FRLGT": "{#Alt_L(Shift_L(m))}",
        "TPH-FRLGT": "{#Alt_L(Shift_L(n))}",
        "OFRLGT": "{#Alt_L(Shift_L(o))}",
        "P-FRLGT": "{#Alt_L(Shift_L(p))}",
        "KW-FRLGT": "{#Alt_L(Shift_L(q))}",
        "R-FRLGT": "{#Alt_L(Shift_L(r))}",
        "S-FRLGT": "{#Alt_L(Shift_L(s))}",
        "T-FRLGT": "{#Alt_L(Shift_L(t))}",
        "UFRLGT": "{#Alt_L(Shift_L(u))}",
        "SR-FRLGT": "{#Alt_L(Shift_L(v))}",
        "W-FRLGT": "{#Alt_L(Shift_L(w))}",
        "KP-FRLGT": "{#Alt_L(Shift_L(x))}",
        "KWR-FRLGT": "{#Alt_L(Shift_L(y))}",
        "STKPW-FRLGT": "{#Alt_L(Shift_L(z))}",
        "1-6R8G9": "{#Alt_L(Shift_L(F1))}",
        "2-6R8G9": "{#Alt_L(Shift_L(F2))}",
        "3-6R8G9": "{#Alt_L(Shift_L(F3))}",
        "4-6R8G9": "{#Alt_L(Shift_L(F4))}",
        "12-6R8G9": "{#Alt_L(Shift_L(F5))}",
        "23-6R8G9": "{#Alt_L(Shift_L(F6))}",
        "34-6R8G9": "{#Alt_L(Shift_L(F7))}",
        "123-6R8G9": "{#Alt_L(Shift_L(F8))}",
        "234-6R8G9": "{#Alt_L(Shift_L(F9))}",
        "14-6R8G9": "{#Alt_L(Shift_L(F10))}",
        "13-6R8G9": "{#Alt_L(Shift_L(F11))}",
        "24-6R8G9": "{#Alt_L(Shift_L(F12))}",
        "STKHR-P": "{#Alt_L(Shift_L(up))}",
        "STKHR-R": "{#Alt_L(Shift_L(left))}",
        "STKHR-B": "{#Alt_L(Shift_L(down))}",
        "STKHR-G": "{#Alt_L(Shift_L(right))}",
        "STKHR-RPG": "{#Alt_L(Shift_L(page_up))}",
        "STKHR-FBL": "{#Alt_L(Shift_L(page_down))}",
        "STKHR-FPL": "{#Alt_L(Shift_L(home))}",
        "STKHR-RBG": "{#Alt_L(Shift_L(end))}",
        "STKHR-RB": "{#Alt_L(Shift_L(return))}",
        "STKHR-F": "{#Alt_L(Shift_L(backspace))}",
        "STKHR-L": "{#Alt_L(Shift_L(delete))}",
        "STKHR-FR": "{#Alt_L(Shift_L(escape))}",
        "STKHR-LG": "{#Alt_L(Shift_L(tab))}",
        "STKHR-RP": "{#Alt_L(Shift_L(slash))}",
        "STKHR-PG": "{#Alt_L(Shift_L(backslash))}",
        "STKPWH": "{#Super_L(Control_L(Alt_L()))}",
        "AFPBLGT": "{#Super_L(Control_L(Alt_L(a)))}",
        "PW-FPBLGT": "{#Super_L(Control_L(Alt_L(b)))}",
        "KR-FPBLGT": "{#Super_L(Control_L(Alt_L(c)))}",
        "TK-FPBLGT": "{#Super_L(Control_L(Alt_L(d)))}",
        "EFPBLGT": "{#Super_L(Control_L(Alt_L(e)))}",
        "TP-FPBLGT": "{#Super_L(Control_L(Alt_L(f)))}",
        "TKPW-FPBLGT": "{#Super_L(Control_L(Alt_L(g)))}",
        "H-FPBLGT": "{#Super_L(Control_L(Alt_L(h)))}",
        "EUFPBLGT": "{#Super_L(Control_L(Alt_L(i)))}",
        "SKWR-FPBLGT": "{#Super_L(Control_L(Alt_L(j)))}",
        "K-FPBLGT": "{#Super_L(Control_L(Alt_L(k)))}",
        "HR-FPBLGT": "{#Super_L(Control_L(Alt_L(l)))}",
        "PH-FPBLGT": "{#Super_L(Control_L(Alt_L(m)))}",
        "TPH-FPBLGT": "{#Super_L(Control_L(Alt_L(n)))}",
        "OFPBLGT": "{#Super_L(Control_L(Alt_L(o)))}",
        "P-FPBLGT": "{#Super_L(Control_L(Alt_L(p)))}",
        "KW-FPBLGT": "{#Super_L(Control_L(Alt_L(q)))}",
        "R-FPBLGT": "{#Super_L(Control_L(Alt_L(r)))}",
        "S-FPBLGT": "{#Super_L(Control_L(Alt_L(s)))}",
        "T-FPBLGT": "{#Super_L(Control_L(Alt_L(t)))}",
        "UFPBLGT": "{#Super_L(Control_L(Alt_L(u)))}",
        "SR-FPBLGT": "{#Super_L(Control_L(Alt_L(v)))}",
        "W-FPBLGT": "{#Super_L(Control_L(Alt_L(w)))}",
        "KP-FPBLGT": "{#Super_L(Control_L(Alt_L(x)))}",
        "KWR-FPBLGT": "{#Super_L(Control_L(Alt_L(y)))}",
        "STKPW-FPBLGT": "{#Super_L(Control_L(Alt_L(z)))}",
        "1-67B8G9": "{#Super_L(Control_L(Alt_L(F1)))}",
        "2-67B8G9": "{#Super_L(Control_L(Alt_L(F2)))}",
        "3-67B8G9": "{#Super_L(Control_L(Alt_L(F3)))}",
        "4-67B8G9": "{#Super_L(Control_L(Alt_L(F4)))}",
        "12-67B8G9": "{#Super_L(Control_L(Alt_L(F5)))}",
        "23-67B8G9": "{#Super_L(Control_L(Alt_L(F6)))}",
        "34-67B8G9": "{#Super_L(Control_L(Alt_L(F7)))}",
        "123-67B8G9": "{#Super_L(Control_L(Alt_L(F8)))}",
        "234-67B8G9": "{#Super_L(Control_L(Alt_L(F9)))}",
        "14-67B8G9": "{#Super_L(Control_L(Alt_L(F10)))}",
        "13-67B8G9": "{#Super_L(Control_L(Alt_L(F11)))}",
        "24-67B8G9": "{#Super_L(Control_L(Alt_L(F12)))}",
        "STKPWH-P": "{#Super_L(Control_L(Alt_L(up)))}",
        "STKPWH-R": "{#Super_L(Control_L(Alt_L(left)))}",
        "STKPWH-B": "{#Super_L(Control_L(Alt_L(down)))}",
        "STKPWH-G": "{#Super_L(Control_L(Alt_L(right)))}",
        "STKPWH-RPG": "{#Super_L(Control_L(Alt_L(page_up)))}",
        "STKPWH-FBL": "{#Super_L(Control_L(Alt_L(page_down)))}",
        "STKPWH-FPL": "{#Super_L(Control_L(Alt_L(home)))}",
        "STKPWH-RBG": "{#Super_L(Control_L(Alt_L(end)))}",
        "STKPWH-RB": "{#Super_L(Control_L(Alt_L(return)))}",
        "STKPWH-F": "{#Super_L(Control_L(Alt_L(backspace)))}",
        "STKPWH-L": "{#Super_L(Control_L(Alt_L(delete)))}",
        "STKPWH-FR": "{#Super_L(Control_L(Alt_L(escape)))}",
        "STKPWH-LG": "{#Super_L(Control_L(Alt_L(tab)))}",
        "STKPWH-RP": "{#Super_L(Control_L(Alt_L(slash)))}",
        "STKPWH-PG": "{#Super_L(Control_L(Alt_L(backslash)))}",
        "STKPWR": "{#Super_L(Control_L(Shift_L()))}",
        "ARPBLGT": "{#Super_L(Control_L(Shift_L(a)))}",
        "PW-RPBLGT": "{#Super_L(Control_L(Shift_L(b)))}",
        "KR-RPBLGT": "{#Super_L(Control_L(Shift_L(c)))}",
        "TK-RPBLGT": "{#Super_L(Control_L(Shift_L(d)))}",
        "ERPBLGT": "{#Super_L(Control_L(Shift_L(e)))}",
        "TP-RPBLGT": "{#Super_L(Control_L(Shift_L(f)))}",
        "TKPW-RPBLGT": "{#Super_L(Control_L(Shift_L(g)))}",
        "H-RPBLGT": "{#Super_L(Control_L(Shift_L(h)))}",
        "EURPBLGT": "{#Super_L(Control_L(Shift_L(i)))}",
        "SKWR-RPBLGT": "{#Super_L(Control_L(Shift_L(j)))}",
        "K-RPBLGT": "{#Super_L(Control_L(Shift_L(k)))}",
        "HR-RPBLGT": "{#Super_L(Control_L(Shift_L(l)))}",
        "PH-RPBLGT": "{#Super_L(Control_L(Shift_L(m)))}",
        "TPH-RPBLGT": "{#Super_L(Control_L(Shift_L(n)))}",
        "ORPBLGT": "{#Super_L(Control_L(Shift_L(o)))}",
        "P-RPBLGT": "{#Super_L(Control_L(Shift_L(p)))}",
        "KW-RPBLGT": "{#Super_L(Control_L(Shift_L(q)))}",
        "R-RPBLGT": "{#Super_L(Control_L(Shift_L(r)))}",
        "S-RPBLGT": "{#Super_L(Control_L(Shift_L(s)))}",
        "T-RPBLGT": "{#Super_L(Control_L(Shift_L(t)))}",
        "URPBLGT": "{#Super_L(Control_L(Shift_L(u)))}",
        "SR-RPBLGT": "{#Super_L(Control_L(Shift_L(v)))}",
        "W-RPBLGT": "{#Super_L(Control_L(Shift_L(w)))}",
        "KP-RPBLGT": "{#Super_L(Control_L(Shift_L(x)))}",
        "KWR-RPBLGT": "{#Super_L(Control_L(Shift_L(y)))}",
        "STKPW-RPBLGT": "{#Super_L(Control_L(Shift_L(z)))}",
        "1-R7B8G9": "{#Super_L(Control_L(Shift_L(F1)))}",
        "2-R7B8G9": "{#Super_L(Control_L(Shift_L(F2)))}",
        "3-R7B8G9": "{#Super_L(Control_L(Shift_L(F3)))}",
        "4-R7B8G9": "{#Super_L(Control_L(Shift_L(F4)))}",
        "12-R7B8G9": "{#Super_L(Control_L(Shift_L(F5)))}",
        "23-R7B8G9": "{#Super_L(Control_L(Shift_L(F6)))}",
        "34-R7B8G9": "{#Super_L(Control_L(Shift_L(F7)))}",
        "123-R7B8G9": "{#Super_L(Control_L(Shift_L(F8)))}",
        "234-R7B8G9": "{#Super_L(Control_L(Shift_L(F9)))}",
        "14-R7B8G9": "{#Super_L(Control_L(Shift_L(F10)))}",
        "13-R7B8G9": "{#Super_L(Control_L(Shift_L(F11)))}",
        "24-R7B8G9": "{#Super_L(Control_L(Shift_L(F12)))}",
        "STKPWR-P": "{#Super_L(Control_L(Shift_L(up)))}",
        "STKPWR-R": "{#Super_L(Control_L(Shift_L(left)))}",
        "STKPWR-B": "{#Super_L(Control_L(Shift_L(down)))}",
        "STKPWR-G": "{#Super_L(Control_L(Shift_L(right)))}",
        "STKPWR-RPG": "{#Super_L(Control_L(Shift_L(page_up)))}",
        "STKPWR-FBL": "{#Super_L(Control_L(Shift_L(page_down)))}",
        "STKPWR-FPL": "{#Super_L(Control_L(Shift_L(home)))}",
        "STKPWR-RBG": "{#Super_L(Control_L(Shift_L(end)))}",
        "STKPWR-RB": "{#Super_L(Control_L(Shift_L(return)))}",
        "STKPWR-F": "{#Super_L(Control_L(Shift_L(backspace)))}",
        "STKPWR-L": "{#Super_L(Control_L(Shift_L(delete)))}",
        "STKPWR-FR": "{#Super_L(Control_L(Shift_L(escape)))}",
        "STKPWR-LG": "{#Super_L(Control_L(Shift_L(tab)))}",
        "STKPWR-RP": "{#Super_L(Control_L(Shift_L(slash)))}",
        "STKPWR-PG": "{#Super_L(Control_L(Shift_L(backslash)))}",
        "STKPHR": "{#Super_L(Alt_L(Shift_L()))}",
        "AFRPLGT": "{#Super_L(Alt_L(Shift_L(a)))}",
        "PW-FRPLGT": "{#Super_L(Alt_L(Shift_L(b)))}",
        "KR-FRPLGT": "{#Super_L(Alt_L(Shift_L(c)))}",
        "TK-FRPLGT": "{#Super_L(Alt_L(Shift_L(d)))}",
        "EFRPLGT": "{#Super_L(Alt_L(Shift_L(e)))}",
        "TP-FRPLGT": "{#Super_L(Alt_L(Shift_L(f)))}",
        "TKPW-FRPLGT": "{#Super_L(Alt_L(Shift_L(g)))}",
        "H-FRPLGT": "{#Super_L(Alt_L(Shift_L(h)))}",
        "EUFRPLGT": "{#Super_L(Alt_L(Shift_L(i)))}",
        "SKWR-FRPLGT": "{#Super_L(Alt_L(Shift_L(j)))}",
        "K-FRPLGT": "{#Super_L(Alt_L(Shift_L(k)))}",
        "HR-FRPLGT": "{#Super_L(Alt_L(Shift_L(l)))}",
        "PH-FRPLGT": "{#Super_L(Alt_L(Shift_L(m)))}",
        "TPH-FRPLGT": "{#Super_L(Alt_L(Shift_L(n)))}",
        "OFRPLGT": "{#Super_L(Alt_L(Shift_L(o)))}",
        "P-FRPLGT": "{#Super_L(Alt_L(Shift_L(p)))}",
        "KW-FRPLGT": "{#Super_L(Alt_L(Shift_L(q)))}",
        "R-FRPLGT": "{#Super_L(Alt_L(Shift_L(r)))}",
        "S-FRPLGT": "{#Super_L(Alt_L(Shift_L(s)))}",
        "T-FRPLGT": "{#Super_L(Alt_L(Shift_L(t)))}",
        "UFRPLGT": "{#Super_L(Alt_L(Shift_L(u)))}",
        "SR-FRPLGT": "{#Super_L(Alt_L(Shift_L(v)))}",
        "W-FRPLGT": "{#Super_L(Alt_L(Shift_L(w)))}",
        "KP-FRPLGT": "{#Super_L(Alt_L(Shift_L(x)))}",
        "KWR-FRPLGT": "{#Super_L(Alt_L(Shift_L(y)))}",
        "STKPW-FRPLGT": "{#Super_L(Alt_L(Shift_L(z)))}",
        "1-6R78G9": "{#Super_L(Alt_L(Shift_L(F1)))}",
        "2-6R78G9": "{#Super_L(Alt_L(Shift_L(F2)))}",
        "3-6R78G9": "{#Super_L(Alt_L(Shift_L(F3)))}",
        "4-6R78G9": "{#Super_L(Alt_L(Shift_L(F4)))}",
        "12-6R78G9": "{#Super_L(Alt_L(Shift_L(F5)))}",
        "23-6R78G9": "{#Super_L(Alt_L(Shift_L(F6)))}",
        "34-6R78G9": "{#Super_L(Alt_L(Shift_L(F7)))}",
        "123-6R78G9": "{#Super_L(Alt_L(Shift_L(F8)))}",
        "234-6R78G9": "{#Super_L(Alt_L(Shift_L(F9)))}",
        "14-6R78G9": "{#Super_L(Alt_L(Shift_L(F10)))}",
        "13-6R78G9": "{#Super_L(Alt_L(Shift_L(F11)))}",
        "24-6R78G9": "{#Super_L(Alt_L(Shift_L(F12)))}",
        "STKPHR-P": "{#Super_L(Alt_L(Shift_L(up)))}",
        "STKPHR-R": "{#Super_L(Alt_L(Shift_L(left)))}",
        "STKPHR-B": "{#Super_L(Alt_L(Shift_L(down)))}",
        "STKPHR-G": "{#Super_L(Alt_L(Shift_L(right)))}",
        "STKPHR-RPG": "{#Super_L(Alt_L(Shift_L(page_up)))}",
        "STKPHR-FBL": "{#Super_L(Alt_L(Shift_L(page_down)))}",
        "STKPHR-FPL": "{#Super_L(Alt_L(Shift_L(home)))}",
        "STKPHR-RBG": "{#Super_L(Alt_L(Shift_L(end)))}",
        "STKPHR-RB": "{#Super_L(Alt_L(Shift_L(return)))}",
        "STKPHR-F": "{#Super_L(Alt_L(Shift_L(backspace)))}",
        "STKPHR-L": "{#Super_L(Alt_L(Shift_L(delete)))}",
        "STKPHR-FR": "{#Super_L(Alt_L(Shift_L(escape)))}",
        "STKPHR-LG": "{#Super_L(Alt_L(Shift_L(tab)))}",
        "STKPHR-RP": "{#Super_L(Alt_L(Shift_L(slash)))}",
        "STKPHR-PG": "{#Super_L(Alt_L(Shift_L(backslash)))}",
        "STKWHR": "{#Control_L(Alt_L(Shift_L()))}",
        "AFRBLGT": "{#Control_L(Alt_L(Shift_L(a)))}",
        "PW-FRBLGT": "{#Control_L(Alt_L(Shift_L(b)))}",
        "KR-FRBLGT": "{#Control_L(Alt_L(Shift_L(c)))}",
        "TK-FRBLGT": "{#Control_L(Alt_L(Shift_L(d)))}",
        "EFRBLGT": "{#Control_L(Alt_L(Shift_L(e)))}",
        "TP-FRBLGT": "{#Control_L(Alt_L(Shift_L(f)))}",
        "TKPW-FRBLGT": "{#Control_L(Alt_L(Shift_L(g)))}",
        "H-FRBLGT": "{#Control_L(Alt_L(Shift_L(h)))}",
        "EUFRBLGT": "{#Control_L(Alt_L(Shift_L(i)))}",
        "SKWR-FRBLGT": "{#Control_L(Alt_L(Shift_L(j)))}",
        "K-FRBLGT": "{#Control_L(Alt_L(Shift_L(k)))}",
        "HR-FRBLGT": "{#Control_L(Alt_L(Shift_L(l)))}",
        "PH-FRBLGT": "{#Control_L(Alt_L(Shift_L(m)))}",
        "TPH-FRBLGT": "{#Control_L(Alt_L(Shift_L(n)))}",
        "OFRBLGT": "{#Control_L(Alt_L(Shift_L(o)))}",
        "P-FRBLGT": "{#Control_L(Alt_L(Shift_L(p)))}",
        "KW-FRBLGT": "{#Control_L(Alt_L(Shift_L(q)))}",
        "R-FRBLGT": "{#Control_L(Alt_L(Shift_L(r)))}",
        "S-FRBLGT": "{#Control_L(Alt_L(Shift_L(s)))}",
        "T-FRBLGT": "{#Control_L(Alt_L(Shift_L(t)))}",
        "UFRBLGT": "{#Control_L(Alt_L(Shift_L(u)))}",
        "SR-FRBLGT": "{#Control_L(Alt_L(Shift_L(v)))}",
        "W-FRBLGT": "{#Control_L(Alt_L(Shift_L(w)))}",
        "KP-FRBLGT": "{#Control_L(Alt_L(Shift_L(x)))}",
        "KWR-FRBLGT": "{#Control_L(Alt_L(Shift_L(y)))}",
        "STKPW-FRBLGT": "{#Control_L(Alt_L(Shift_L(z)))}",
        "1-6RB8G9": "{#Control_L(Alt_L(Shift_L(F1)))}",
        "2-6RB8G9": "{#Control_L(Alt_L(Shift_L(F2)))}",
        "3-6RB8G9": "{#Control_L(Alt_L(Shift_L(F3)))}",
        "4-6RB8G9": "{#Control_L(Alt_L(Shift_L(F4)))}",
        "12-6RB8G9": "{#Control_L(Alt_L(Shift_L(F5)))}",
        "23-6RB8G9": "{#Control_L(Alt_L(Shift_L(F6)))}",
        "34-6RB8G9": "{#Control_L(Alt_L(Shift_L(F7)))}",
        "123-6RB8G9": "{#Control_L(Alt_L(Shift_L(F8)))}",
        "234-6RB8G9": "{#Control_L(Alt_L(Shift_L(F9)))}",
        "14-6RB8G9": "{#Control_L(Alt_L(Shift_L(F10)))}",
        "13-6RB8G9": "{#Control_L(Alt_L(Shift_L(F11)))}",
        "24-6RB8G9": "{#Control_L(Alt_L(Shift_L(F12)))}",
        "STKWHR-P": "{#Control_L(Alt_L(Shift_L(up)))}",
        "STKWHR-R": "{#Control_L(Alt_L(Shift_L(left)))}",
        "STKWHR-B": "{#Control_L(Alt_L(Shift_L(down)))}",
        "STKWHR-G": "{#Control_L(Alt_L(Shift_L(right)))}",
        "STKWHR-RPG": "{#Control_L(Alt_L(Shift_L(page_up)))}",
        "STKWHR-FBL": "{#Control_L(Alt_L(Shift_L(page_down)))}",
        "STKWHR-FPL": "{#Control_L(Alt_L(Shift_L(home)))}",
        "STKWHR-RBG": "{#Control_L(Alt_L(Shift_L(end)))}",
        "STKWHR-RB": "{#Control_L(Alt_L(Shift_L(return)))}",
        "STKWHR-F": "{#Control_L(Alt_L(Shift_L(backspace)))}",
        "STKWHR-L": "{#Control_L(Alt_L(Shift_L(delete)))}",
        "STKWHR-FR": "{#Control_L(Alt_L(Shift_L(escape)))}",
        "STKWHR-LG": "{#Control_L(Alt_L(Shift_L(tab)))}",
        "STKWHR-RP": "{#Control_L(Alt_L(Shift_L(slash)))}",
        "STKWHR-PG": "{#Control_L(Alt_L(Shift_L(backslash)))}",
        "STKPWHR": "{#Super_L(Control_L(Alt_L(Shift_L())))}",
        "AFRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(a))))}",
        "PW-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(b))))}",
        "KR-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(c))))}",
        "TK-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(d))))}",
        "EFRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(e))))}",
        "TP-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(f))))}",
        "TKPW-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(g))))}",
        "H-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(h))))}",
        "EUFRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(i))))}",
        "SKWR-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(j))))}",
        "K-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(k))))}",
        "HR-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(l))))}",
        "PH-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(m))))}",
        "TPH-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(n))))}",
        "OFRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(o))))}",
        "P-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(p))))}",
        "KW-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(q))))}",
        "R-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(r))))}",
        "S-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(s))))}",
        "T-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(t))))}",
        "UFRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(u))))}",
        "SR-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(v))))}",
        "W-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(w))))}",
        "KP-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(x))))}",
        "KWR-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(y))))}",
        "STKPW-FRPBLGT": "{#Super_L(Control_L(Alt_L(Shift_L(z))))}",
        "1-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F1))))}",
        "2-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F2))))}",
        "3-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F3))))}",
        "4-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F4))))}",
        "12-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F5))))}",
        "23-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F6))))}",
        "34-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F7))))}",
        "123-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F8))))}",
        "234-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F9))))}",
        "14-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F10))))}",
        "13-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F11))))}",
        "24-6R7B8G9": "{#Super_L(Control_L(Alt_L(Shift_L(F12))))}",
        "STKPWHR-P": "{#Super_L(Control_L(Alt_L(Shift_L(up))))}",
        "STKPWHR-R": "{#Super_L(Control_L(Alt_L(Shift_L(left))))}",
        "STKPWHR-B": "{#Super_L(Control_L(Alt_L(Shift_L(down))))}",
        "STKPWHR-G": "{#Super_L(Control_L(Alt_L(Shift_L(right))))}",
        "STKPWHR-RPG": "{#Super_L(Control_L(Alt_L(Shift_L(page_up))))}",
        "STKPWHR-FBL": "{#Super_L(Control_L(Alt_L(Shift_L(page_down))))}",
        "STKPWHR-FPL": "{#Super_L(Control_L(Alt_L(Shift_L(home))))}",
        "STKPWHR-RBG": "{#Super_L(Control_L(Alt_L(Shift_L(end))))}",
        "STKPWHR-RB": "{#Super_L(Control_L(Alt_L(Shift_L(return))))}",
        "STKPWHR-F": "{#Super_L(Control_L(Alt_L(Shift_L(backspace))))}",
        "STKPWHR-L": "{#Super_L(Control_L(Alt_L(Shift_L(delete))))}",
        "STKPWHR-FR": "{#Super_L(Control_L(Alt_L(Shift_L(escape))))}",
        "STKPWHR-LG": "{#Super_L(Control_L(Alt_L(Shift_L(tab))))}",
        "STKPWHR-RP": "{#Super_L(Control_L(Alt_L(Shift_L(slash))))}",
        "STKPWHR-PG": "{#Super_L(Control_L(Alt_L(Shift_L(backslash))))}"
}
#+end_src

** Leftovers
Mark Kislingbury [[http://acraconference2015.weebly.com/uploads/2/1/4/4/21444166/mark_kislingbury_presentation_acra_01-23-2015.pdf][advises]] to put small words on the left.  Steno order
means that we can then use the rest of the board to represent phrases
containing that word.  For example, =THA= ("that") leaves the board
open for phrases like "that was", "that will", "that had", etc. by
adding a single key.

We can use this principle with =SH= (Shift), =KR= (Control), and =PH=
(Meta/Alt).  By default, =SH= is "shh", =PH= is "pH", and =KR= is
"consider".  All of these strokes are far more important than their
default mappings.  Additionally, =KHR= is also mapped to "consider".
This means we can apprehend each stroke without much penalty to the
overall Plover theory.

This should mean we can write commands in a way that simulates holding
a modifier key.

The idea is to map all Emacs bindings to chains.  In this way, all
bindings can at least be expressed in multiple strokes.  For example,

- =C-x f= would be =KR/T-PLZ/F=
- =C-c C-c= would be =KR/KR*/KR/KR*=
- etc.

Of course we would want more efficient bindings than those. But the
idea, I think, covers all the cases completely and intuitively.

* Closing bracket
#+begin_src js :tangle plover-emacs.json :exports none :noweb yes
<<generated>>
}
#+end_src

* Footnotes

[fn:3] For example, the code blocks shown on this web page are
directly used to generate the Plover dictionary.  Further, this web
page is itself generated using Emacs.  All of this happens from a
single source file.  We could even go so far as to host this web page
with Emacs if we wanted :)

[fn:2] "M" for "meta".  The Meta key, similar to use as the Alt key,
existed before the Alt key.  When Emacs was first created, the Meta
key was common and the notation stuck.

[fn:1] Technically to a [[https://en.wikipedia.org/wiki/Emacs_Lisp#Example][Lisp]] function.
